{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python Fundamentals This online document helps the absolute beginners to persue the future direction in coding and machine learning. The lesson starts with how to write code in Python along with fundamental ideas in data structure, function and class, input output, error handling, Python Standard Library and associated projects. Current days scenarios in computing resources in Python. Why Codes? Codes are apparently the language for Human-Machine interface. Coding is the most fundamental skill required for growing with modern days technology. Sicen our computers are built up based on logic and algorithm, our coding languages are also higher lavel of logical steps made undersatndable for human. By typing a line of code, we are speaking the laguage of the machine. Fundamentally, each programming language has it's inner working principle with underlying datastructure and functions. Computer while running a piece of code maintains the data in the memory ( temporary at RAM or permanent at Hard Disk). Whil code is live in the machine, it has time and space complexicities with the underlying datastructure and algotihm excuting the task.","title":"Home"},{"location":"#python-fundamentals","text":"This online document helps the absolute beginners to persue the future direction in coding and machine learning. The lesson starts with how to write code in Python along with fundamental ideas in data structure, function and class, input output, error handling, Python Standard Library and associated projects. Current days scenarios in computing resources in Python.","title":"Python Fundamentals"},{"location":"#why-codes","text":"Codes are apparently the language for Human-Machine interface. Coding is the most fundamental skill required for growing with modern days technology. Sicen our computers are built up based on logic and algorithm, our coding languages are also higher lavel of logical steps made undersatndable for human. By typing a line of code, we are speaking the laguage of the machine. Fundamentally, each programming language has it's inner working principle with underlying datastructure and functions. Computer while running a piece of code maintains the data in the memory ( temporary at RAM or permanent at Hard Disk). Whil code is live in the machine, it has time and space complexicities with the underlying datastructure and algotihm excuting the task.","title":"Why Codes?"},{"location":"DataStructure/ds/","text":"Fundamental Data Structure : The fundamental data structure in python includes Primitive type* ( Integer, Float, String , and Boolean***) and Non-Primitive type* ( Array, List, Tuples, Dictionary, Set , and File***) In this tutorial, we are going to discudd about List, Tuples, Set and Dictionary. List List is built in data structure in python. It is - Mutable i.e., we can change or edite the size of the list by appending, inserting and deleting the elements. - List can hold heterogeneous objects (e.g., integer, string, boolean) Lets try to understand the List: To initiate a blank List. l = [] To find the type of the object. type (l) list To create a list from scratch. L = [ 1 , 2 , 3 , 4 , 5 , 6 , 342 , 34 ] L [1, 2, 3, 4, 5, 6, 342, 34] Indexing of list. L[ 0 ],L[ 1 ],L[ 5 ] (1, 2, 6) Revers indexing is also possible. L[ - 1 ],L[ - 2 ],L[ - 3 ] (6, 5, 4) To find the length of list. len (L) 6 To add the element from last. L . append( 12 ) L [1, 2, 3, 4, 5, 6, 12] To find the sum of the elements (if they are of same types like int. double etc) sum (L) 33 To find maximum and minimum of the list max (L), min (L) (12, 1) To create a list of heterogeneous element types. L = [ 1 , 2.0 , 3 , 4 , 5 , \"Apple\" , True , False ] To find the type of elements of a list. type (L[ 1 ]), type (L[ 5 ]) (float, str) To create a list of list. L = [[ 1 , 2 , 3 ],[ 3 , 4 , 5 ],[ 5 , 7 , 9 ]] To find list inside a list. L[ 0 ] [1, 2, 3] L[ 0 ][ 1 ] 2 To add two list. It is not as ususal addition. The elements are accumulated. L1 = [ 1 , 2 , 3 ] ; L2 = [ 2 , 4 , 6 ] L1 + L2, set (L1 + L2) ([1, 2, 3, 2, 4, 6], {1, 2, 3, 4, 6}) To add element from end of the list L = [ 1 , 4 , 2 , 3 , 5 , 6 , 7 ] L . append( 100 ) L [1, 4, 2, 3, 5, 6, 7, 100] To insert element (100) at specific index (1) L = [ 1 , 4 , 2 , 3 , 5 , 6 , 7 ] L . insert( 1 , 100 ) L [1, 100, 4, 2, 3, 5, 6, 7] To remove specific element form list. It will remove the first occurance. L = [ 1 , 4 , 2 , 3 , 5 , 6 , 7 , 4 ] L . remove( 4 ) L [1, 2, 3, 5, 6, 7, 4] To remove the element from specific index L = [ 1 , 4 , 2 , 3 , 5 , 6 , 7 ] L . pop( - 1 ) L [1, 4, 2, 3, 5, 6] To sort the list L = [ 1 , 10 , 2 , 30 , 5 , 60 , 7 ] L . sort() L [1, 2, 5, 7, 10, 30, 60] To reverse the list L = [ 1 , 4 , 2 , 3 , 5 , 6 , 7 ] L . reverse() L [7, 6, 5, 3, 2, 4, 1] List comprehension L = [x for x in range ( 100 )] print (L) [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99] L = [x for x in range ( 100 ) if x % 2 == 0 ] print (L) [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98] import random as rn rn . randint( 0 , 100 ) 59 import random as rn R = [rn . randint( 0 , 100 ) for k in range ( 200 )] print (R) [89, 28, 17, 21, 30, 12, 2, 18, 44, 35, 39, 34, 36, 15, 62, 31, 29, 67, 89, 84, 52, 99, 12, 2, 65, 93, 37, 60, 65, 65, 67, 65, 83, 96, 6, 16, 96, 38, 43, 28, 38, 4, 60, 48, 5, 50, 82, 27, 75, 94, 3, 11, 55, 87, 56, 48, 71, 40, 7, 20, 45, 29, 100, 4, 23, 86, 0, 46, 69, 60, 85, 27, 45, 93, 6, 68, 13, 66, 89, 59, 46, 89, 41, 84, 69, 11, 22, 38, 24, 74, 82, 6, 12, 84, 14, 68, 16, 2, 91, 62, 57, 72, 98, 4, 98, 64, 72, 57, 73, 12, 78, 40, 0, 10, 36, 52, 71, 42, 27, 94, 32, 82, 22, 89, 37, 26, 55, 80, 49, 48, 69, 34, 48, 97, 39, 82, 78, 97, 11, 38, 77, 62, 55, 95, 52, 42, 61, 94, 100, 86, 28, 41, 75, 13, 40, 22, 7, 78, 2, 51, 84, 30, 45, 39, 54, 72, 88, 48, 10, 78, 9, 44, 18, 36, 23, 83, 1, 88, 37, 87, 85, 4, 65, 55, 11, 97, 90, 77, 1, 41, 75, 37, 43, 3, 45, 38, 4, 16, 87, 47] import collections #High Performance Counting C = collections . Counter(R) print (C) Counter({37: 5, 17: 5, 67: 5, 15: 4, 99: 4, 88: 4, 61: 4, 54: 4, 96: 4, 80: 4, 51: 4, 83: 4, 14: 4, 10: 3, 78: 3, 27: 3, 49: 3, 62: 3, 38: 3, 48: 3, 94: 3, 66: 3, 81: 3, 72: 3, 95: 3, 1: 3, 21: 3, 100: 3, 40: 3, 28: 3, 43: 3, 29: 2, 16: 2, 7: 2, 74: 2, 60: 2, 64: 2, 85: 2, 50: 2, 39: 2, 44: 2, 8: 2, 90: 2, 58: 2, 0: 2, 79: 2, 24: 2, 98: 2, 93: 2, 22: 2, 68: 2, 42: 2, 86: 2, 30: 2, 41: 2, 77: 2, 59: 2, 34: 2, 4: 2, 31: 2, 57: 2, 6: 2, 73: 2, 45: 1, 69: 1, 91: 1, 71: 1, 75: 1, 87: 1, 70: 1, 47: 1, 82: 1, 18: 1, 9: 1, 26: 1, 55: 1, 56: 1, 23: 1, 52: 1, 33: 1, 13: 1, 2: 1, 46: 1, 36: 1, 53: 1, 92: 1, 84: 1, 12: 1, 20: 1, 5: 1}) R = [rn . choice([ 'A' , 'T' , 'G' , 'C' ]) for i in range ( 200 )] print (R) ['A', 'T', 'C', 'T', 'T', 'C', 'A', 'C', 'G', 'G', 'A', 'T', 'G', 'G', 'C', 'T', 'G', 'C', 'A', 'T', 'A', 'T', 'T', 'G', 'G', 'G', 'A', 'C', 'G', 'G', 'C', 'C', 'A', 'T', 'A', 'A', 'G', 'G', 'G', 'A', 'A', 'G', 'C', 'C', 'A', 'A', 'C', 'G', 'C', 'G', 'T', 'A', 'A', 'A', 'G', 'G', 'T', 'T', 'A', 'G', 'T', 'T', 'G', 'A', 'C', 'G', 'C', 'C', 'G', 'T', 'C', 'T', 'A', 'C', 'G', 'G', 'G', 'T', 'G', 'A', 'A', 'G', 'C', 'T', 'T', 'C', 'C', 'A', 'A', 'G', 'A', 'C', 'G', 'C', 'T', 'T', 'T', 'T', 'A', 'A', 'T', 'C', 'C', 'T', 'G', 'A', 'C', 'G', 'C', 'A', 'G', 'A', 'C', 'C', 'C', 'A', 'G', 'T', 'A', 'G', 'C', 'A', 'G', 'C', 'G', 'G', 'G', 'T', 'T', 'T', 'A', 'A', 'C', 'T', 'G', 'A', 'T', 'A', 'G', 'G', 'G', 'C', 'G', 'T', 'C', 'C', 'T', 'G', 'G', 'C', 'G', 'A', 'G', 'C', 'C', 'A', 'T', 'A', 'T', 'T', 'C', 'A', 'C', 'T', 'G', 'T', 'G', 'T', 'T', 'T', 'C', 'T', 'G', 'C', 'A', 'G', 'G', 'C', 'T', 'T', 'C', 'G', 'C', 'T', 'C', 'G', 'A', 'G', 'T', 'G', 'A', 'C', 'C', 'T', 'A', 'G', 'C', 'T', 'T', 'T'] DNA = '' . join(R) DNA 'ATCTTCACGGATGGCTGCATATTGGGACGGCCATAAGGGAAGCCAACGCGTAAAGGTTAGTTGACGCCGTCTACGGGTGAAGCTTCCAAGACGCTTTTAATCCTGACGCAGACCCAGTAGCAGCGGGTTTAACTGATAGGGCGTCCTGGCGAGCCATATTCACTGTGTTTCTGCAGGCTTCGCTCGAGTGACCTAGCTTT' DNA . count( 'A' ), DNA . count( 'AT' ), DNA . count( 'ATG' ) (44, 9, 1) Mini Assignment: Create a DNA string of 10,000 characters and count the following: A,T,G,C,all combination of two charaters, all combinations of three characters. Tuples Tuples are non-mutable, which means we can ot add or remove elements once tuple is defind. To define a tuples from scratch t = ( 2 , 3 , 4 , 5 ) Find type type (t) tuple Indexing t[ 1 ] 3 L = [( 1 , 2 ),( 2 , 3 ),( 3 , 4 )] L[ 0 ][ 0 ] 1 Create a list of tuples L = [( 1 , 2 ),( \"a\" , \"b\" ),( True , False )] L [(1, 2), ('a', 'b'), (True, False)] Dictionary Dictionary organizes the data with key-value pair. Dictionary can be nested with other data types. To initiate a dictionary D = dict () DD = {} Create a dictionary from scratch D = { \"fruit\" : 'apple' , \"vegetable\" : 'carrot' , \"rice\" : 2.0 , 'milk' : 10 ,} What are keys? D . keys() dict_keys(['fruit', 'vegetable', 'rice', 'milk']) What are values? D . values() dict_values(['apple', 'carrot', 2.0, 10]) Indexing D[ 'fruit' ], D[ \"rice\" ] ('apple', 2.0) Iteration over key and values for key,value in D . items(): print (key,value) fruit apple vegetable carrot rice 2.0 milk 10 To update a dictionary D . update({ \"salt\" : 2.0 }) D {'fruit': 'apple', 'vegetable': 'carrot', 'rice': 2.0, 'milk': 10, 'salt': 2.0} To create a list form a Dictionary. Only keys are collected. list (D) ['fruit', 'vegetable', 'rice', 'milk'] To create a list of keys only list (D . keys()) ['fruit', 'vegetable', 'rice', 'milk'] To create a list of values list (D . values()) ['apple', 'carrot', 2.0, 10, 2.0] To create Dictionary of with list, tuples and dictionary DD = { \"names\" :( \"John\" , \"Harry\" , \"Brat\" ),\\ \"roll no\" : [ 1 , 2 , 3 ],\\ \"plan\" :{ \"first\" :[ 12 , 34 , 56 ], \"second\" :[ 1 , 3 , 5 ]}} DD {'names': ['John', 'Harry', 'Brat'], 'roll no': (1, 2, 3), 'plan': {'first': [12, 34, 56], 'second': [1, 3, 5]}} import numpy as np X = np . arange( 0 ,np . pi, 0.1 ) print (X) [0. 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1. 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2. 2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9 3. 3.1] import numpy as np X = np . arange( 0 ,np . pi, 0.1 ) M = { \"sin\" : [np . sin(x) for x in X],\\ \"cos\" : [np . cos(x) for x in X],\\ \"plo\" :[(x * x + x + 1 ) for x in X],\\ \"trig\" : [np . cos(x) + np . sin(x) for x in X]} print (M) {'sin': [0.0, 0.09983341664682815, 0.19866933079506122, 0.2955202066613396, 0.3894183423086505, 0.479425538604203, 0.5646424733950355, 0.6442176872376911, 0.7173560908995228, 0.7833269096274834, 0.8414709848078965, 0.8912073600614354, 0.9320390859672264, 0.963558185417193, 0.9854497299884603, 0.9974949866040544, 0.9995736030415051, 0.9916648104524686, 0.9738476308781951, 0.9463000876874145, 0.9092974268256817, 0.8632093666488737, 0.8084964038195901, 0.74570521217672, 0.6754631805511506, 0.5984721441039564, 0.5155013718214642, 0.4273798802338298, 0.33498815015590466, 0.23924932921398198, 0.1411200080598672, 0.04158066243329049], 'cos': [1.0, 0.9950041652780258, 0.9800665778412416, 0.955336489125606, 0.9210609940028851, 0.8775825618903728, 0.8253356149096782, 0.7648421872844884, 0.6967067093471654, 0.6216099682706644, 0.5403023058681398, 0.4535961214255773, 0.3623577544766734, 0.26749882862458735, 0.16996714290024081, 0.0707372016677029, -0.029199522301288815, -0.12884449429552486, -0.2272020946930871, -0.3232895668635036, -0.4161468365471424, -0.5048461045998576, -0.5885011172553458, -0.6662760212798244, -0.7373937155412458, -0.8011436155469337, -0.8568887533689473, -0.9040721420170612, -0.9422223406686583, -0.9709581651495907, -0.9899924966004454, -0.9991351502732795], 'plo': [1.0, 1.11, 1.24, 1.3900000000000001, 1.56, 1.75, 1.9600000000000002, 2.1900000000000004, 2.4400000000000004, 2.71, 3.0, 3.3100000000000005, 3.6400000000000006, 3.99, 4.36, 4.75, 5.16, 5.590000000000001, 6.04, 6.510000000000001, 7.0, 7.51, 8.040000000000001, 8.590000000000002, 9.160000000000002, 9.75, 10.360000000000001, 10.990000000000002, 11.640000000000002, 12.310000000000002, 13.0, 13.71], 'trig': [1.0, 1.094837581924854, 1.1787359086363027, 1.2508566957869456, 1.3104793363115357, 1.3570081004945758, 1.3899780883047137, 1.4090598745221796, 1.4140628002466882, 1.4049368778981477, 1.3817732906760363, 1.3448034814870127, 1.2943968404438997, 1.2310570140417803, 1.155416872888701, 1.0682321882717574, 0.9703740807402162, 0.8628203161569437, 0.7466455361851081, 0.623010520823911, 0.4931505902785393, 0.35836326204901614, 0.21999528656424427, 0.0794291908968956, -0.061930534990095154, -0.20267147144297726, -0.34138738154748316, -0.47669226178323143, -0.6072341905127536, -0.7317088359356086, -0.8488724885405782, -0.957554487839989]} import pandas as pd DF = pd . DataFrame(M) DF .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } sin cos plo trig 0 0.000000 1.000000 1.00 1.000000 1 0.099833 0.995004 1.11 1.094838 2 0.198669 0.980067 1.24 1.178736 3 0.295520 0.955336 1.39 1.250857 4 0.389418 0.921061 1.56 1.310479 5 0.479426 0.877583 1.75 1.357008 6 0.564642 0.825336 1.96 1.389978 7 0.644218 0.764842 2.19 1.409060 8 0.717356 0.696707 2.44 1.414063 9 0.783327 0.621610 2.71 1.404937 10 0.841471 0.540302 3.00 1.381773 11 0.891207 0.453596 3.31 1.344803 12 0.932039 0.362358 3.64 1.294397 13 0.963558 0.267499 3.99 1.231057 14 0.985450 0.169967 4.36 1.155417 15 0.997495 0.070737 4.75 1.068232 16 0.999574 -0.029200 5.16 0.970374 17 0.991665 -0.128844 5.59 0.862820 18 0.973848 -0.227202 6.04 0.746646 19 0.946300 -0.323290 6.51 0.623011 20 0.909297 -0.416147 7.00 0.493151 21 0.863209 -0.504846 7.51 0.358363 22 0.808496 -0.588501 8.04 0.219995 23 0.745705 -0.666276 8.59 0.079429 24 0.675463 -0.737394 9.16 -0.061931 25 0.598472 -0.801144 9.75 -0.202671 26 0.515501 -0.856889 10.36 -0.341387 27 0.427380 -0.904072 10.99 -0.476692 28 0.334988 -0.942222 11.64 -0.607234 29 0.239249 -0.970958 12.31 -0.731709 30 0.141120 -0.989992 13.00 -0.848872 31 0.041581 -0.999135 13.71 -0.957554 % matplotlib inline DF . plot() <matplotlib.axes._subplots.AxesSubplot at 0x211d87c8668> References: https://docs.python.org/3/tutorial/index.html","title":"DataStructure"},{"location":"DataStructure/ds/#fundamental-data-structure","text":"The fundamental data structure in python includes Primitive type* ( Integer, Float, String , and Boolean***) and Non-Primitive type* ( Array, List, Tuples, Dictionary, Set , and File***) In this tutorial, we are going to discudd about List, Tuples, Set and Dictionary.","title":"Fundamental Data Structure :"},{"location":"DataStructure/ds/#list","text":"List is built in data structure in python. It is - Mutable i.e., we can change or edite the size of the list by appending, inserting and deleting the elements. - List can hold heterogeneous objects (e.g., integer, string, boolean) Lets try to understand the List: To initiate a blank List. l = [] To find the type of the object. type (l) list To create a list from scratch. L = [ 1 , 2 , 3 , 4 , 5 , 6 , 342 , 34 ] L [1, 2, 3, 4, 5, 6, 342, 34] Indexing of list. L[ 0 ],L[ 1 ],L[ 5 ] (1, 2, 6) Revers indexing is also possible. L[ - 1 ],L[ - 2 ],L[ - 3 ] (6, 5, 4) To find the length of list. len (L) 6 To add the element from last. L . append( 12 ) L [1, 2, 3, 4, 5, 6, 12] To find the sum of the elements (if they are of same types like int. double etc) sum (L) 33 To find maximum and minimum of the list max (L), min (L) (12, 1) To create a list of heterogeneous element types. L = [ 1 , 2.0 , 3 , 4 , 5 , \"Apple\" , True , False ] To find the type of elements of a list. type (L[ 1 ]), type (L[ 5 ]) (float, str) To create a list of list. L = [[ 1 , 2 , 3 ],[ 3 , 4 , 5 ],[ 5 , 7 , 9 ]] To find list inside a list. L[ 0 ] [1, 2, 3] L[ 0 ][ 1 ] 2 To add two list. It is not as ususal addition. The elements are accumulated. L1 = [ 1 , 2 , 3 ] ; L2 = [ 2 , 4 , 6 ] L1 + L2, set (L1 + L2) ([1, 2, 3, 2, 4, 6], {1, 2, 3, 4, 6}) To add element from end of the list L = [ 1 , 4 , 2 , 3 , 5 , 6 , 7 ] L . append( 100 ) L [1, 4, 2, 3, 5, 6, 7, 100] To insert element (100) at specific index (1) L = [ 1 , 4 , 2 , 3 , 5 , 6 , 7 ] L . insert( 1 , 100 ) L [1, 100, 4, 2, 3, 5, 6, 7] To remove specific element form list. It will remove the first occurance. L = [ 1 , 4 , 2 , 3 , 5 , 6 , 7 , 4 ] L . remove( 4 ) L [1, 2, 3, 5, 6, 7, 4] To remove the element from specific index L = [ 1 , 4 , 2 , 3 , 5 , 6 , 7 ] L . pop( - 1 ) L [1, 4, 2, 3, 5, 6] To sort the list L = [ 1 , 10 , 2 , 30 , 5 , 60 , 7 ] L . sort() L [1, 2, 5, 7, 10, 30, 60] To reverse the list L = [ 1 , 4 , 2 , 3 , 5 , 6 , 7 ] L . reverse() L [7, 6, 5, 3, 2, 4, 1] List comprehension L = [x for x in range ( 100 )] print (L) [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99] L = [x for x in range ( 100 ) if x % 2 == 0 ] print (L) [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98] import random as rn rn . randint( 0 , 100 ) 59 import random as rn R = [rn . randint( 0 , 100 ) for k in range ( 200 )] print (R) [89, 28, 17, 21, 30, 12, 2, 18, 44, 35, 39, 34, 36, 15, 62, 31, 29, 67, 89, 84, 52, 99, 12, 2, 65, 93, 37, 60, 65, 65, 67, 65, 83, 96, 6, 16, 96, 38, 43, 28, 38, 4, 60, 48, 5, 50, 82, 27, 75, 94, 3, 11, 55, 87, 56, 48, 71, 40, 7, 20, 45, 29, 100, 4, 23, 86, 0, 46, 69, 60, 85, 27, 45, 93, 6, 68, 13, 66, 89, 59, 46, 89, 41, 84, 69, 11, 22, 38, 24, 74, 82, 6, 12, 84, 14, 68, 16, 2, 91, 62, 57, 72, 98, 4, 98, 64, 72, 57, 73, 12, 78, 40, 0, 10, 36, 52, 71, 42, 27, 94, 32, 82, 22, 89, 37, 26, 55, 80, 49, 48, 69, 34, 48, 97, 39, 82, 78, 97, 11, 38, 77, 62, 55, 95, 52, 42, 61, 94, 100, 86, 28, 41, 75, 13, 40, 22, 7, 78, 2, 51, 84, 30, 45, 39, 54, 72, 88, 48, 10, 78, 9, 44, 18, 36, 23, 83, 1, 88, 37, 87, 85, 4, 65, 55, 11, 97, 90, 77, 1, 41, 75, 37, 43, 3, 45, 38, 4, 16, 87, 47] import collections #High Performance Counting C = collections . Counter(R) print (C) Counter({37: 5, 17: 5, 67: 5, 15: 4, 99: 4, 88: 4, 61: 4, 54: 4, 96: 4, 80: 4, 51: 4, 83: 4, 14: 4, 10: 3, 78: 3, 27: 3, 49: 3, 62: 3, 38: 3, 48: 3, 94: 3, 66: 3, 81: 3, 72: 3, 95: 3, 1: 3, 21: 3, 100: 3, 40: 3, 28: 3, 43: 3, 29: 2, 16: 2, 7: 2, 74: 2, 60: 2, 64: 2, 85: 2, 50: 2, 39: 2, 44: 2, 8: 2, 90: 2, 58: 2, 0: 2, 79: 2, 24: 2, 98: 2, 93: 2, 22: 2, 68: 2, 42: 2, 86: 2, 30: 2, 41: 2, 77: 2, 59: 2, 34: 2, 4: 2, 31: 2, 57: 2, 6: 2, 73: 2, 45: 1, 69: 1, 91: 1, 71: 1, 75: 1, 87: 1, 70: 1, 47: 1, 82: 1, 18: 1, 9: 1, 26: 1, 55: 1, 56: 1, 23: 1, 52: 1, 33: 1, 13: 1, 2: 1, 46: 1, 36: 1, 53: 1, 92: 1, 84: 1, 12: 1, 20: 1, 5: 1}) R = [rn . choice([ 'A' , 'T' , 'G' , 'C' ]) for i in range ( 200 )] print (R) ['A', 'T', 'C', 'T', 'T', 'C', 'A', 'C', 'G', 'G', 'A', 'T', 'G', 'G', 'C', 'T', 'G', 'C', 'A', 'T', 'A', 'T', 'T', 'G', 'G', 'G', 'A', 'C', 'G', 'G', 'C', 'C', 'A', 'T', 'A', 'A', 'G', 'G', 'G', 'A', 'A', 'G', 'C', 'C', 'A', 'A', 'C', 'G', 'C', 'G', 'T', 'A', 'A', 'A', 'G', 'G', 'T', 'T', 'A', 'G', 'T', 'T', 'G', 'A', 'C', 'G', 'C', 'C', 'G', 'T', 'C', 'T', 'A', 'C', 'G', 'G', 'G', 'T', 'G', 'A', 'A', 'G', 'C', 'T', 'T', 'C', 'C', 'A', 'A', 'G', 'A', 'C', 'G', 'C', 'T', 'T', 'T', 'T', 'A', 'A', 'T', 'C', 'C', 'T', 'G', 'A', 'C', 'G', 'C', 'A', 'G', 'A', 'C', 'C', 'C', 'A', 'G', 'T', 'A', 'G', 'C', 'A', 'G', 'C', 'G', 'G', 'G', 'T', 'T', 'T', 'A', 'A', 'C', 'T', 'G', 'A', 'T', 'A', 'G', 'G', 'G', 'C', 'G', 'T', 'C', 'C', 'T', 'G', 'G', 'C', 'G', 'A', 'G', 'C', 'C', 'A', 'T', 'A', 'T', 'T', 'C', 'A', 'C', 'T', 'G', 'T', 'G', 'T', 'T', 'T', 'C', 'T', 'G', 'C', 'A', 'G', 'G', 'C', 'T', 'T', 'C', 'G', 'C', 'T', 'C', 'G', 'A', 'G', 'T', 'G', 'A', 'C', 'C', 'T', 'A', 'G', 'C', 'T', 'T', 'T'] DNA = '' . join(R) DNA 'ATCTTCACGGATGGCTGCATATTGGGACGGCCATAAGGGAAGCCAACGCGTAAAGGTTAGTTGACGCCGTCTACGGGTGAAGCTTCCAAGACGCTTTTAATCCTGACGCAGACCCAGTAGCAGCGGGTTTAACTGATAGGGCGTCCTGGCGAGCCATATTCACTGTGTTTCTGCAGGCTTCGCTCGAGTGACCTAGCTTT' DNA . count( 'A' ), DNA . count( 'AT' ), DNA . count( 'ATG' ) (44, 9, 1)","title":"List"},{"location":"DataStructure/ds/#mini-assignment","text":"Create a DNA string of 10,000 characters and count the following: A,T,G,C,all combination of two charaters, all combinations of three characters.","title":"Mini  Assignment:"},{"location":"DataStructure/ds/#tuples","text":"Tuples are non-mutable, which means we can ot add or remove elements once tuple is defind. To define a tuples from scratch t = ( 2 , 3 , 4 , 5 ) Find type type (t) tuple Indexing t[ 1 ] 3 L = [( 1 , 2 ),( 2 , 3 ),( 3 , 4 )] L[ 0 ][ 0 ] 1 Create a list of tuples L = [( 1 , 2 ),( \"a\" , \"b\" ),( True , False )] L [(1, 2), ('a', 'b'), (True, False)]","title":"Tuples"},{"location":"DataStructure/ds/#dictionary","text":"Dictionary organizes the data with key-value pair. Dictionary can be nested with other data types. To initiate a dictionary D = dict () DD = {} Create a dictionary from scratch D = { \"fruit\" : 'apple' , \"vegetable\" : 'carrot' , \"rice\" : 2.0 , 'milk' : 10 ,} What are keys? D . keys() dict_keys(['fruit', 'vegetable', 'rice', 'milk']) What are values? D . values() dict_values(['apple', 'carrot', 2.0, 10]) Indexing D[ 'fruit' ], D[ \"rice\" ] ('apple', 2.0) Iteration over key and values for key,value in D . items(): print (key,value) fruit apple vegetable carrot rice 2.0 milk 10 To update a dictionary D . update({ \"salt\" : 2.0 }) D {'fruit': 'apple', 'vegetable': 'carrot', 'rice': 2.0, 'milk': 10, 'salt': 2.0} To create a list form a Dictionary. Only keys are collected. list (D) ['fruit', 'vegetable', 'rice', 'milk'] To create a list of keys only list (D . keys()) ['fruit', 'vegetable', 'rice', 'milk'] To create a list of values list (D . values()) ['apple', 'carrot', 2.0, 10, 2.0] To create Dictionary of with list, tuples and dictionary DD = { \"names\" :( \"John\" , \"Harry\" , \"Brat\" ),\\ \"roll no\" : [ 1 , 2 , 3 ],\\ \"plan\" :{ \"first\" :[ 12 , 34 , 56 ], \"second\" :[ 1 , 3 , 5 ]}} DD {'names': ['John', 'Harry', 'Brat'], 'roll no': (1, 2, 3), 'plan': {'first': [12, 34, 56], 'second': [1, 3, 5]}} import numpy as np X = np . arange( 0 ,np . pi, 0.1 ) print (X) [0. 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1. 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2. 2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9 3. 3.1] import numpy as np X = np . arange( 0 ,np . pi, 0.1 ) M = { \"sin\" : [np . sin(x) for x in X],\\ \"cos\" : [np . cos(x) for x in X],\\ \"plo\" :[(x * x + x + 1 ) for x in X],\\ \"trig\" : [np . cos(x) + np . sin(x) for x in X]} print (M) {'sin': [0.0, 0.09983341664682815, 0.19866933079506122, 0.2955202066613396, 0.3894183423086505, 0.479425538604203, 0.5646424733950355, 0.6442176872376911, 0.7173560908995228, 0.7833269096274834, 0.8414709848078965, 0.8912073600614354, 0.9320390859672264, 0.963558185417193, 0.9854497299884603, 0.9974949866040544, 0.9995736030415051, 0.9916648104524686, 0.9738476308781951, 0.9463000876874145, 0.9092974268256817, 0.8632093666488737, 0.8084964038195901, 0.74570521217672, 0.6754631805511506, 0.5984721441039564, 0.5155013718214642, 0.4273798802338298, 0.33498815015590466, 0.23924932921398198, 0.1411200080598672, 0.04158066243329049], 'cos': [1.0, 0.9950041652780258, 0.9800665778412416, 0.955336489125606, 0.9210609940028851, 0.8775825618903728, 0.8253356149096782, 0.7648421872844884, 0.6967067093471654, 0.6216099682706644, 0.5403023058681398, 0.4535961214255773, 0.3623577544766734, 0.26749882862458735, 0.16996714290024081, 0.0707372016677029, -0.029199522301288815, -0.12884449429552486, -0.2272020946930871, -0.3232895668635036, -0.4161468365471424, -0.5048461045998576, -0.5885011172553458, -0.6662760212798244, -0.7373937155412458, -0.8011436155469337, -0.8568887533689473, -0.9040721420170612, -0.9422223406686583, -0.9709581651495907, -0.9899924966004454, -0.9991351502732795], 'plo': [1.0, 1.11, 1.24, 1.3900000000000001, 1.56, 1.75, 1.9600000000000002, 2.1900000000000004, 2.4400000000000004, 2.71, 3.0, 3.3100000000000005, 3.6400000000000006, 3.99, 4.36, 4.75, 5.16, 5.590000000000001, 6.04, 6.510000000000001, 7.0, 7.51, 8.040000000000001, 8.590000000000002, 9.160000000000002, 9.75, 10.360000000000001, 10.990000000000002, 11.640000000000002, 12.310000000000002, 13.0, 13.71], 'trig': [1.0, 1.094837581924854, 1.1787359086363027, 1.2508566957869456, 1.3104793363115357, 1.3570081004945758, 1.3899780883047137, 1.4090598745221796, 1.4140628002466882, 1.4049368778981477, 1.3817732906760363, 1.3448034814870127, 1.2943968404438997, 1.2310570140417803, 1.155416872888701, 1.0682321882717574, 0.9703740807402162, 0.8628203161569437, 0.7466455361851081, 0.623010520823911, 0.4931505902785393, 0.35836326204901614, 0.21999528656424427, 0.0794291908968956, -0.061930534990095154, -0.20267147144297726, -0.34138738154748316, -0.47669226178323143, -0.6072341905127536, -0.7317088359356086, -0.8488724885405782, -0.957554487839989]} import pandas as pd DF = pd . DataFrame(M) DF .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } sin cos plo trig 0 0.000000 1.000000 1.00 1.000000 1 0.099833 0.995004 1.11 1.094838 2 0.198669 0.980067 1.24 1.178736 3 0.295520 0.955336 1.39 1.250857 4 0.389418 0.921061 1.56 1.310479 5 0.479426 0.877583 1.75 1.357008 6 0.564642 0.825336 1.96 1.389978 7 0.644218 0.764842 2.19 1.409060 8 0.717356 0.696707 2.44 1.414063 9 0.783327 0.621610 2.71 1.404937 10 0.841471 0.540302 3.00 1.381773 11 0.891207 0.453596 3.31 1.344803 12 0.932039 0.362358 3.64 1.294397 13 0.963558 0.267499 3.99 1.231057 14 0.985450 0.169967 4.36 1.155417 15 0.997495 0.070737 4.75 1.068232 16 0.999574 -0.029200 5.16 0.970374 17 0.991665 -0.128844 5.59 0.862820 18 0.973848 -0.227202 6.04 0.746646 19 0.946300 -0.323290 6.51 0.623011 20 0.909297 -0.416147 7.00 0.493151 21 0.863209 -0.504846 7.51 0.358363 22 0.808496 -0.588501 8.04 0.219995 23 0.745705 -0.666276 8.59 0.079429 24 0.675463 -0.737394 9.16 -0.061931 25 0.598472 -0.801144 9.75 -0.202671 26 0.515501 -0.856889 10.36 -0.341387 27 0.427380 -0.904072 10.99 -0.476692 28 0.334988 -0.942222 11.64 -0.607234 29 0.239249 -0.970958 12.31 -0.731709 30 0.141120 -0.989992 13.00 -0.848872 31 0.041581 -0.999135 13.71 -0.957554 % matplotlib inline DF . plot() <matplotlib.axes._subplots.AxesSubplot at 0x211d87c8668>","title":"Dictionary"},{"location":"DataStructure/ds/#references","text":"https://docs.python.org/3/tutorial/index.html","title":"References:"},{"location":"Errors/lfr/","text":"Learning from Errors What is wrong here? # This is title This is paragraph --------------------------------------------------------------------------- NameError Traceback (most recent call last) <ipython-input-1-9784fba40ee2> in <module> 1 # This is title 2 ----> 3 This is paragraph NameError: name 'This' is not defined Note: Learn more about Jupyter notebook functionalities What is wrong here? print \"Hello world\" File \"<ipython-input-3-9fb80848b1b7>\", line 1 print \"Hello world\" ^ SyntaxError: Missing parentheses in call to 'print'. Did you mean print(\"Hello world\")? What is wrong here? for i in range ( 4 ): print (i) File \"<ipython-input-5-8ee9e742a8b8>\", line 2 print(i) ^ IndentationError: expected an indented block What is wrong here? L = [ 3 , 5 , 7 ] L[ 3 ] --------------------------------------------------------------------------- IndexError Traceback (most recent call last) <ipython-input-13-e5031a802bc6> in <module> 1 L = [3,5,7] ----> 2 L[3] IndexError: list index out of range What is wrong here? A = npp . array([ 2 , 5 , 7 ]) --------------------------------------------------------------------------- NameError Traceback (most recent call last) <ipython-input-8-c9813575a7f9> in <module> ----> 1 A = npp.array([2,5,7]) NameError: name 'npp' is not defined def myfunction (): x = random . randint() return x + 10 myfunction() --------------------------------------------------------------------------- NameError Traceback (most recent call last) <ipython-input-16-7b999452a26c> in <module> ----> 1 myfunction() <ipython-input-15-6920121cfd0d> in myfunction() 1 def myfunction(): ----> 2 x = random.randint() 3 return x+10 NameError: name 'random' is not defined def myfunction (x): return x + y myfunction( 5 ) --------------------------------------------------------------------------- NameError Traceback (most recent call last) <ipython-input-18-8afb436c6a81> in <module> ----> 1 myfunction(5) <ipython-input-17-29ec7037f18c> in myfunction(x) 1 def myfunction(x): ----> 2 return x+y NameError: name 'y' is not defined def myfunction (x): y = 6 return x + y myfunction( 5 ) 11 y --------------------------------------------------------------------------- NameError Traceback (most recent call last) <ipython-input-22-9063a9f0e032> in <module> ----> 1 y NameError: name 'y' is not defined What is wrong here? for i in range ( 5 ): print ( 5 / i) --------------------------------------------------------------------------- ZeroDivisionError Traceback (most recent call last) <ipython-input-29-7f38f68db52f> in <module> 1 for i in range(5): ----> 2 print(5/i) ZeroDivisionError: division by zero open ( \"imaginary.txt\" ) --------------------------------------------------------------------------- FileNotFoundError Traceback (most recent call last) <ipython-input-30-2bedf9c67314> in <module> ----> 1 open(\"imaginary.txt\") FileNotFoundError: [Errno 2] No such file or directory: 'imaginary.txt' L = [ 1 , 2 , 3 , 4 ] type (L) list for k,v in L . items(): print (k,v) --------------------------------------------------------------------------- AttributeError Traceback (most recent call last) <ipython-input-22-1284dd3b8bca> in <module> ----> 1 for k,v in L.items(): 2 print(k,v) AttributeError: 'list' object has no attribute 'items' Types of Error: Learn more about Python errors Exception Cause of Error AssertionError Raised when an assert statement fails. AttributeError Raised when attribute assignment or reference fails. EOFError Raised when the input() function hits end-of-file condition. FloatingPointError Raised when a floating point operation fails. GeneratorExit Raise when a generator's close() method is called. ImportError Raised when the imported module is not found. IndexError Raised when the index of a sequence is out of range. KeyError Raised when a key is not found in a dictionary. KeyboardInterrupt Raised when the user hits the interrupt key (Ctrl+C or Delete). MemoryError Raised when an operation runs out of memory. NameError Raised when a variable is not found in local or global scope. NotImplementedError Raised by abstract methods. OSError Raised when system operation causes system related error. OverflowError Raised when the result of an arithmetic operation is too large to be represented. ReferenceError Raised when a weak reference proxy is used to access a garbage collected referent. RuntimeError Raised when an error does not fall under any other category. StopIteration Raised by next() function to indicate that there is no further item to be returned by iterator. SyntaxError Raised by parser when syntax error is encountered. IndentationError Raised when there is incorrect indentation. TabError Raised when indentation consists of inconsistent tabs and spaces. SystemError Raised when interpreter detects internal error. SystemExit Raised by sys.exit() function. TypeError Raised when a function or operation is applied to an object of incorrect type. UnboundLocalError Raised when a reference is made to a local variable in a function or method, but no value has been bound to that variable. UnicodeError Raised when a Unicode-related encoding or decoding error occurs. UnicodeEncodeError Raised when a Unicode-related error occurs during encoding. UnicodeDecodeError Raised when a Unicode-related error occurs during decoding. UnicodeTranslateError Raised when a Unicode-related error occurs during translating. ValueError Raised when a function gets an argument of correct type but improper value. ZeroDivisionError Raised when the second operand of division or modulo operation is zero. Exception Handeling Learn more in builtin exceptions D = { \"1344\" : 234.98 , \"2564\" : 345.97 , \"3345\" : 367.95 , \"#\" : 358.63 , \"*\" : 283.54 } for k,v in D . items(): k = int (k) --------------------------------------------------------------------------- ValueError Traceback (most recent call last) <ipython-input-2-6fae1746f8e5> in <module> 1 for k,v in D.items(): ----> 2 k = int(k) ValueError: invalid literal for int() with base 10: '#' int_dict = {} non_int_dict = {} for k,v in D . items(): try : int_dict . update({ int (k):v}) print ( \"this is integer\" , k) except : non_int_dict . update({k:v}) print ( 'this is not integer' ,k) this is integer 1344 this is integer 2564 this is integer 3345 this is not integer # this is not integer * int_dict {1344: 234.98, 2564: 345.97, 3345: 367.95} non_int_dict {'#': 358.63, '*': 283.54}","title":"Handeling Errors"},{"location":"Errors/lfr/#learning-from-errors","text":"What is wrong here? # This is title This is paragraph --------------------------------------------------------------------------- NameError Traceback (most recent call last) <ipython-input-1-9784fba40ee2> in <module> 1 # This is title 2 ----> 3 This is paragraph NameError: name 'This' is not defined Note: Learn more about Jupyter notebook functionalities What is wrong here? print \"Hello world\" File \"<ipython-input-3-9fb80848b1b7>\", line 1 print \"Hello world\" ^ SyntaxError: Missing parentheses in call to 'print'. Did you mean print(\"Hello world\")? What is wrong here? for i in range ( 4 ): print (i) File \"<ipython-input-5-8ee9e742a8b8>\", line 2 print(i) ^ IndentationError: expected an indented block What is wrong here? L = [ 3 , 5 , 7 ] L[ 3 ] --------------------------------------------------------------------------- IndexError Traceback (most recent call last) <ipython-input-13-e5031a802bc6> in <module> 1 L = [3,5,7] ----> 2 L[3] IndexError: list index out of range What is wrong here? A = npp . array([ 2 , 5 , 7 ]) --------------------------------------------------------------------------- NameError Traceback (most recent call last) <ipython-input-8-c9813575a7f9> in <module> ----> 1 A = npp.array([2,5,7]) NameError: name 'npp' is not defined def myfunction (): x = random . randint() return x + 10 myfunction() --------------------------------------------------------------------------- NameError Traceback (most recent call last) <ipython-input-16-7b999452a26c> in <module> ----> 1 myfunction() <ipython-input-15-6920121cfd0d> in myfunction() 1 def myfunction(): ----> 2 x = random.randint() 3 return x+10 NameError: name 'random' is not defined def myfunction (x): return x + y myfunction( 5 ) --------------------------------------------------------------------------- NameError Traceback (most recent call last) <ipython-input-18-8afb436c6a81> in <module> ----> 1 myfunction(5) <ipython-input-17-29ec7037f18c> in myfunction(x) 1 def myfunction(x): ----> 2 return x+y NameError: name 'y' is not defined def myfunction (x): y = 6 return x + y myfunction( 5 ) 11 y --------------------------------------------------------------------------- NameError Traceback (most recent call last) <ipython-input-22-9063a9f0e032> in <module> ----> 1 y NameError: name 'y' is not defined What is wrong here? for i in range ( 5 ): print ( 5 / i) --------------------------------------------------------------------------- ZeroDivisionError Traceback (most recent call last) <ipython-input-29-7f38f68db52f> in <module> 1 for i in range(5): ----> 2 print(5/i) ZeroDivisionError: division by zero open ( \"imaginary.txt\" ) --------------------------------------------------------------------------- FileNotFoundError Traceback (most recent call last) <ipython-input-30-2bedf9c67314> in <module> ----> 1 open(\"imaginary.txt\") FileNotFoundError: [Errno 2] No such file or directory: 'imaginary.txt' L = [ 1 , 2 , 3 , 4 ] type (L) list for k,v in L . items(): print (k,v) --------------------------------------------------------------------------- AttributeError Traceback (most recent call last) <ipython-input-22-1284dd3b8bca> in <module> ----> 1 for k,v in L.items(): 2 print(k,v) AttributeError: 'list' object has no attribute 'items'","title":"Learning from Errors"},{"location":"Errors/lfr/#types-of-error","text":"Learn more about Python errors Exception Cause of Error AssertionError Raised when an assert statement fails. AttributeError Raised when attribute assignment or reference fails. EOFError Raised when the input() function hits end-of-file condition. FloatingPointError Raised when a floating point operation fails. GeneratorExit Raise when a generator's close() method is called. ImportError Raised when the imported module is not found. IndexError Raised when the index of a sequence is out of range. KeyError Raised when a key is not found in a dictionary. KeyboardInterrupt Raised when the user hits the interrupt key (Ctrl+C or Delete). MemoryError Raised when an operation runs out of memory. NameError Raised when a variable is not found in local or global scope. NotImplementedError Raised by abstract methods. OSError Raised when system operation causes system related error. OverflowError Raised when the result of an arithmetic operation is too large to be represented. ReferenceError Raised when a weak reference proxy is used to access a garbage collected referent. RuntimeError Raised when an error does not fall under any other category. StopIteration Raised by next() function to indicate that there is no further item to be returned by iterator. SyntaxError Raised by parser when syntax error is encountered. IndentationError Raised when there is incorrect indentation. TabError Raised when indentation consists of inconsistent tabs and spaces. SystemError Raised when interpreter detects internal error. SystemExit Raised by sys.exit() function. TypeError Raised when a function or operation is applied to an object of incorrect type. UnboundLocalError Raised when a reference is made to a local variable in a function or method, but no value has been bound to that variable. UnicodeError Raised when a Unicode-related encoding or decoding error occurs. UnicodeEncodeError Raised when a Unicode-related error occurs during encoding. UnicodeDecodeError Raised when a Unicode-related error occurs during decoding. UnicodeTranslateError Raised when a Unicode-related error occurs during translating. ValueError Raised when a function gets an argument of correct type but improper value. ZeroDivisionError Raised when the second operand of division or modulo operation is zero.","title":"Types of Error:"},{"location":"Errors/lfr/#exception-handeling","text":"Learn more in builtin exceptions D = { \"1344\" : 234.98 , \"2564\" : 345.97 , \"3345\" : 367.95 , \"#\" : 358.63 , \"*\" : 283.54 } for k,v in D . items(): k = int (k) --------------------------------------------------------------------------- ValueError Traceback (most recent call last) <ipython-input-2-6fae1746f8e5> in <module> 1 for k,v in D.items(): ----> 2 k = int(k) ValueError: invalid literal for int() with base 10: '#' int_dict = {} non_int_dict = {} for k,v in D . items(): try : int_dict . update({ int (k):v}) print ( \"this is integer\" , k) except : non_int_dict . update({k:v}) print ( 'this is not integer' ,k) this is integer 1344 this is integer 2564 this is integer 3345 this is not integer # this is not integer * int_dict {1344: 234.98, 2564: 345.97, 3345: 367.95} non_int_dict {'#': 358.63, '*': 283.54}","title":"Exception Handeling"},{"location":"FunctionClass/fnc/","text":"Functions and Classes Function and Class are required for object oriented programming. Functions, once created, can be implemented multiple times while Class is more useful for both data encaptulation and functions. import numpy as np import random as random Function sum ([ 2 , 3 ]) 5 def printer (message): print ( \"your message is:\" ,message) return printer( \"How are you?\" ) your message is: How are you? for i in range ( 10 ): printer(i) your message is: 0 your message is: 1 your message is: 2 your message is: 3 your message is: 4 your message is: 5 your message is: 6 your message is: 7 your message is: 8 your message is: 9 def list2dict (L): D = {} for e in L: D . update({e:L . index(e)}) return D mylist = [ 34 , 45 , 67 , 89 , 90 , 36 , 12 , 57 ] x2 = list2dict(mylist) def dice (N): roll = [] for r in range (N): s = random . choice([ 1 , 2 , 3 , 4 , 5 , 6 ]) roll . append(s) return roll print (dice( 100 )) [4, 5, 5, 4, 2, 1, 6, 2, 6, 3, 6, 5, 5, 4, 4, 6, 3, 1, 3, 5, 5, 5, 4, 3, 1, 2, 2, 4, 4, 5, 1, 2, 3, 6, 4, 6, 5, 1, 3, 1, 4, 2, 6, 1, 3, 5, 2, 3, 4, 6, 1, 5, 5, 6, 1, 3, 1, 2, 6, 5, 5, 3, 1, 1, 3, 1, 6, 2, 2, 3, 2, 2, 6, 6, 4, 5, 1, 6, 4, 4, 4, 2, 3, 1, 4, 1, 5, 3, 5, 3, 2, 2, 2, 3, 6, 1, 3, 6, 5, 6] def grader (g): if g > 80 : return \"A\" elif g < 80 and g > 60 : return \"B\" else : return \"C\" grader( 95 ),grader( 50 ) ('A', 'C') def plo (x): A = 2.9 B = 8.7 C = 8.1 y = A * x ** 2 + B * x + C + np . pi return y plo( 1.2 ) 25.857592653589794 Class Circle Define a function which will take radious as input and provides area as output for a circle. def f (r): A = np . pi * r ** 2 return A f( 3 ) 28.274333882308138 def area (r): A = np . pi * r ** 2 return A area( 4 ) 50.26548245743669 Claculate the area of a sample circle of radius 10. a1 = area( 10 ) print (a1) 314.1592653589793 Define a function which will take radious as input and provides circumference as output for a circle. def circumference (r): C = 2 * np . pi * r return C Claculate the circumference of a sample circle of radius 10. circumference( 10 ) 62.83185307179586 Lets build a class implementing above constants and functions class Circle (): def __init__ ( self , supplied_r): self . r = supplied_r def area ( self ): A = np . pi * self . r ** 2 return A def circumference ( self ): C = 2 * np . pi * self . r return C Test using examples. Circle object can be created by calling Circle(5) and function area() can be applied later ot together. C = Circle( 5 ) C . area() 78.53981633974483 type (C) __main__.Circle C . r 5 C . circumference() 31.41592653589793 Circle( 5 ) . area() 78.53981633974483 CC = Circle( 10 ) CC . area(),CC . circumference(),CC . r (314.1592653589793, 62.83185307179586, 10) To use class and function object multiple time. for r in [ 2 , 3 , 6 , 24 , 25 , 46 , 567 ]: CC = Circle(r) print ( \"radius: \" , CC . r,\\ \"area : \" , CC . area(),\\ \"circumf : \" , CC . circumference()) radius: 2 area : 12.566370614359172 circumf : 12.566370614359172 radius: 3 area : 28.274333882308138 circumf : 18.84955592153876 radius: 6 area : 113.09733552923255 circumf : 37.69911184307752 radius: 24 area : 1809.5573684677208 circumf : 150.79644737231007 radius: 25 area : 1963.4954084936207 circumf : 157.07963267948966 radius: 46 area : 6647.610054996002 circumf : 289.02652413026095 radius: 567 area : 1009987.480609929 circumf : 3562.5660691708254 Class Gravity To create a function Gravity def gravity (m1,m2,d): F = (m1 * m2) / d ** 2 return F gravity( 5 , 4 , 10 ) 0.2 Lets create a class Newton for Gravity calculation class Newton (): def __init__ ( self ,value_of_G, value_of_g, supplied_info): self . G = value_of_G self . info = supplied_info self . g = value_of_g def gravity ( self ,m1,m2,d): F = self . G * (m1 * m2) / d ** 2 print ( self . info) return F def gravity_pot ( self ,m1): F = m1 * self . g return F To create a object by calling a class with define inputs. N1 = Newton(value_of_G = 6.7 , value_of_g = 9.8 ,\\ supplied_info = \"great job\" ) To find constants and output of functions N1 . G, N1 . g,N1 . gravity( 2 , 3 , 13 ),N1 . gravity_pot( 12 ) great job (6.7, 9.8, 0.2378698224852071, 117.60000000000001) N1 . gravity(m1 = 11 ,m2 = 12 ,d = 3 ) great job 98.26666666666667 Class Dice Lets create a Class called Dice for fun class Dice ( object ): def __init__ ( self ,A_value,B_value,C_value): self . pi = 3.14 self . A = A_value self . B = B_value self . C = C_value def find_sum ( self ,n1,n2): S = n1 + n2 return S def find_product ( self ,n1,n2): P = n1 * n2 return P def poly ( self ,x): pl = self . A * self . find_product(x,x) + self . B * x + self . C return pl def roll_dice ( self ): side = random . choice([ 1 , 2 , 3 , 4 , 5 , 6 ]) return side def roll_two_dices ( self ): d1 = self . roll_dice() d2 = self . roll_dice() p = self . find_product(d1,d2) s = self . find_sum(d1,d2) return d1,d2,p,s To implement object created by class with predefined input A = 2.3 ; B = 4.5 ; C = 8.9 D = Dice(A,B,C) Can I ask this object for value of A, B and C? D . A, D . B, D . C (2.3, 4.5, 8.9) To roll a dice to get randum side D . roll_dice() 4 To roll two dice for two randum side. The roll_two_dices function implements find_sum() and find_product functions inside it. D . roll_two_dices() (2, 4, 8, 6) To roll a single dice and supply the output of single roll of dice to calculate polynomial function by implementing poly function d = D . roll_dice() D . poly(d) 43.1 References: https://docs.python.org/3/tutorial/index.html","title":"Functions and Class"},{"location":"FunctionClass/fnc/#functions-and-classes","text":"Function and Class are required for object oriented programming. Functions, once created, can be implemented multiple times while Class is more useful for both data encaptulation and functions. import numpy as np import random as random","title":"Functions and Classes"},{"location":"FunctionClass/fnc/#function","text":"sum ([ 2 , 3 ]) 5 def printer (message): print ( \"your message is:\" ,message) return printer( \"How are you?\" ) your message is: How are you? for i in range ( 10 ): printer(i) your message is: 0 your message is: 1 your message is: 2 your message is: 3 your message is: 4 your message is: 5 your message is: 6 your message is: 7 your message is: 8 your message is: 9 def list2dict (L): D = {} for e in L: D . update({e:L . index(e)}) return D mylist = [ 34 , 45 , 67 , 89 , 90 , 36 , 12 , 57 ] x2 = list2dict(mylist) def dice (N): roll = [] for r in range (N): s = random . choice([ 1 , 2 , 3 , 4 , 5 , 6 ]) roll . append(s) return roll print (dice( 100 )) [4, 5, 5, 4, 2, 1, 6, 2, 6, 3, 6, 5, 5, 4, 4, 6, 3, 1, 3, 5, 5, 5, 4, 3, 1, 2, 2, 4, 4, 5, 1, 2, 3, 6, 4, 6, 5, 1, 3, 1, 4, 2, 6, 1, 3, 5, 2, 3, 4, 6, 1, 5, 5, 6, 1, 3, 1, 2, 6, 5, 5, 3, 1, 1, 3, 1, 6, 2, 2, 3, 2, 2, 6, 6, 4, 5, 1, 6, 4, 4, 4, 2, 3, 1, 4, 1, 5, 3, 5, 3, 2, 2, 2, 3, 6, 1, 3, 6, 5, 6] def grader (g): if g > 80 : return \"A\" elif g < 80 and g > 60 : return \"B\" else : return \"C\" grader( 95 ),grader( 50 ) ('A', 'C') def plo (x): A = 2.9 B = 8.7 C = 8.1 y = A * x ** 2 + B * x + C + np . pi return y plo( 1.2 ) 25.857592653589794","title":"Function"},{"location":"FunctionClass/fnc/#class-circle","text":"Define a function which will take radious as input and provides area as output for a circle. def f (r): A = np . pi * r ** 2 return A f( 3 ) 28.274333882308138 def area (r): A = np . pi * r ** 2 return A area( 4 ) 50.26548245743669 Claculate the area of a sample circle of radius 10. a1 = area( 10 ) print (a1) 314.1592653589793 Define a function which will take radious as input and provides circumference as output for a circle. def circumference (r): C = 2 * np . pi * r return C Claculate the circumference of a sample circle of radius 10. circumference( 10 ) 62.83185307179586 Lets build a class implementing above constants and functions class Circle (): def __init__ ( self , supplied_r): self . r = supplied_r def area ( self ): A = np . pi * self . r ** 2 return A def circumference ( self ): C = 2 * np . pi * self . r return C Test using examples. Circle object can be created by calling Circle(5) and function area() can be applied later ot together. C = Circle( 5 ) C . area() 78.53981633974483 type (C) __main__.Circle C . r 5 C . circumference() 31.41592653589793 Circle( 5 ) . area() 78.53981633974483 CC = Circle( 10 ) CC . area(),CC . circumference(),CC . r (314.1592653589793, 62.83185307179586, 10) To use class and function object multiple time. for r in [ 2 , 3 , 6 , 24 , 25 , 46 , 567 ]: CC = Circle(r) print ( \"radius: \" , CC . r,\\ \"area : \" , CC . area(),\\ \"circumf : \" , CC . circumference()) radius: 2 area : 12.566370614359172 circumf : 12.566370614359172 radius: 3 area : 28.274333882308138 circumf : 18.84955592153876 radius: 6 area : 113.09733552923255 circumf : 37.69911184307752 radius: 24 area : 1809.5573684677208 circumf : 150.79644737231007 radius: 25 area : 1963.4954084936207 circumf : 157.07963267948966 radius: 46 area : 6647.610054996002 circumf : 289.02652413026095 radius: 567 area : 1009987.480609929 circumf : 3562.5660691708254","title":"Class Circle"},{"location":"FunctionClass/fnc/#class-gravity","text":"To create a function Gravity def gravity (m1,m2,d): F = (m1 * m2) / d ** 2 return F gravity( 5 , 4 , 10 ) 0.2 Lets create a class Newton for Gravity calculation class Newton (): def __init__ ( self ,value_of_G, value_of_g, supplied_info): self . G = value_of_G self . info = supplied_info self . g = value_of_g def gravity ( self ,m1,m2,d): F = self . G * (m1 * m2) / d ** 2 print ( self . info) return F def gravity_pot ( self ,m1): F = m1 * self . g return F To create a object by calling a class with define inputs. N1 = Newton(value_of_G = 6.7 , value_of_g = 9.8 ,\\ supplied_info = \"great job\" ) To find constants and output of functions N1 . G, N1 . g,N1 . gravity( 2 , 3 , 13 ),N1 . gravity_pot( 12 ) great job (6.7, 9.8, 0.2378698224852071, 117.60000000000001) N1 . gravity(m1 = 11 ,m2 = 12 ,d = 3 ) great job 98.26666666666667","title":"Class Gravity"},{"location":"FunctionClass/fnc/#class-dice","text":"Lets create a Class called Dice for fun class Dice ( object ): def __init__ ( self ,A_value,B_value,C_value): self . pi = 3.14 self . A = A_value self . B = B_value self . C = C_value def find_sum ( self ,n1,n2): S = n1 + n2 return S def find_product ( self ,n1,n2): P = n1 * n2 return P def poly ( self ,x): pl = self . A * self . find_product(x,x) + self . B * x + self . C return pl def roll_dice ( self ): side = random . choice([ 1 , 2 , 3 , 4 , 5 , 6 ]) return side def roll_two_dices ( self ): d1 = self . roll_dice() d2 = self . roll_dice() p = self . find_product(d1,d2) s = self . find_sum(d1,d2) return d1,d2,p,s To implement object created by class with predefined input A = 2.3 ; B = 4.5 ; C = 8.9 D = Dice(A,B,C) Can I ask this object for value of A, B and C? D . A, D . B, D . C (2.3, 4.5, 8.9) To roll a dice to get randum side D . roll_dice() 4 To roll two dice for two randum side. The roll_two_dices function implements find_sum() and find_product functions inside it. D . roll_two_dices() (2, 4, 8, 6) To roll a single dice and supply the output of single roll of dice to calculate polynomial function by implementing poly function d = D . roll_dice() D . poly(d) 43.1","title":"Class Dice"},{"location":"FunctionClass/fnc/#references","text":"https://docs.python.org/3/tutorial/index.html","title":"References:"},{"location":"GettingStarted/anaconda/","text":"Installing Python To install Anaconda Python follow the instruction at Anaconda Distribution Website . Based on the operating system select the proper version of the Anaconda package and install it in your PC. After you successfully install the proper version, you will get anaconda application in you PC which will look like the figure below: Best way to start with is the \"Jupyter notebook\". Lunch the jupyter notebook to start with Python. Note- Linux: For Linux user, it could be little bit tricky. SOme time it becomes hard to locate anaconda path to the environment so you need to point the python you want to use. Please, run the command below to point the python: bash export PATH=/home/ubuntu/anaconda3/bin:$PATH There is 'base' or 'anaconda3' environment by defult. You can find the list of available environmet by typing following command on the terminal bash conda env list To start the 'base' environment type bash source activate base To install new package for example 'jupyter notebook' type bash pip install jupyter notebook After sucessfully installing Jupyter notebook, tye following to start it bash Jupyter notebook Note - Cloud For running Jupyter notebook in AWS cloud, it is important to open the \"8888\" to \"8889\" with TCP rule with IP \"0.0.0.0\" and allow to be opend from anywhere. Once port is open, type following to bash jupyter notebook --ip=0.0.0.0 --no-browser","title":"Guide to Installing Python"},{"location":"GettingStarted/anaconda/#installing-python","text":"To install Anaconda Python follow the instruction at Anaconda Distribution Website . Based on the operating system select the proper version of the Anaconda package and install it in your PC. After you successfully install the proper version, you will get anaconda application in you PC which will look like the figure below: Best way to start with is the \"Jupyter notebook\". Lunch the jupyter notebook to start with Python.","title":"Installing Python"},{"location":"GettingStarted/anaconda/#note-linux","text":"For Linux user, it could be little bit tricky. SOme time it becomes hard to locate anaconda path to the environment so you need to point the python you want to use. Please, run the command below to point the python: bash export PATH=/home/ubuntu/anaconda3/bin:$PATH There is 'base' or 'anaconda3' environment by defult. You can find the list of available environmet by typing following command on the terminal bash conda env list To start the 'base' environment type bash source activate base To install new package for example 'jupyter notebook' type bash pip install jupyter notebook After sucessfully installing Jupyter notebook, tye following to start it bash Jupyter notebook","title":"Note- Linux:"},{"location":"GettingStarted/anaconda/#note-cloud","text":"For running Jupyter notebook in AWS cloud, it is important to open the \"8888\" to \"8889\" with TCP rule with IP \"0.0.0.0\" and allow to be opend from anywhere. Once port is open, type following to bash jupyter notebook --ip=0.0.0.0 --no-browser","title":"Note - Cloud"},{"location":"GettingStarted/env/","text":"Python Environment Basics To avoid errors later, it's best to update all the packages in the default environment. Open the Anaconda Prompt application. In the prompt, run the following commands: conda upgrade conda conda upgrade --all If you are seeing the following \"conda command not found\" and are using ZShell, you have to do the following: export PATH = \"/Users/username/anaconda/bin: $PATH \" or update above command line to your .zsh_config file. Once you have Anaconda installed, managing packages is fairly straightforward. To install a package, type conda install package_name in your terminal. For example, to install numpy, type conda install numpy. You can install multiple packages at the same time. Something like conda install numpy scipy pandas will install all those packages simultaneously. It's also possible to specify which version of a package you want by adding the version number such as conda install numpy = 1 .10. Conda also automatically installs dependencies for you. For example scipy depends on numpy, it uses and requires numpy. If you install just scipy (conda install scipy), Conda will also install numpy if it isn't already installed. Most of the commands are pretty intuitive. To uninstall, use conda remove package_name To update a package conda update package_name If you want to update all packages in an environment, which is often useful, use conda update --all And finally, to list installed packages, it's conda list If you don't know the exact name of the package you're looking for, you can try searching with conda search search_term For example, I know I want to install Beautiful Soup, but I'm not sure of the exact package name. So, I try conda search beautifulsoup Environments Conda can be used to create environments to isolate your projects. To create an environment, use conda create -n env_name list of packages in your terminal Here -n env_name sets the name of your environment (-n for name) and list of packages is the list of packages you want installed in the environment. For example, to create an environment named my_env and install numpy in it, type conda create -n my_env numpy When creating an environment, you can specify which version of Python to install in the environment. This is useful when you're working with code in both Python 2.x and Python 3.x. To create an environment with a specific Python version, do something like conda create -n py3 python = 3 or conda create -n py2 python = 2 I actually have both of these environments on my personal computer. I use them as general environments not tied to any specific project, but rather for general work with each Python version easily accessible. These commands will install the most recent version of Python 3 and 2, respectively. To install a specific version, use conda create -n py python = 3 .3 for Python 3.3. Once you have an environment created, use source activate my_env to enter it on OSX/Linux. On Windows, use activate my_env When you're in the environment, you'll see the environment name in the terminal prompt. Something like (my_env) ~ $. The environment has only a few packages installed by default, plus the ones you installed when creating it. You can check this out with conda list. Installing packages in the environment is the same as before: conda install package_name Only this time, the specific packages you install will only be available when you're in the environment. To leave the environment, type source deactivate ( on OSX/Linux ) On Windows, use deactivate Saving and loading environments A really useful feature is sharing environments so others can install all the packages used in your code, with the correct versions. You can save the packages to a YAML file with conda env export > environment.yaml The first part conda env export writes out all the packages in the environment, including the Python version. Above you can see the name of the environment and all the dependencies (along with versions) are listed. The second part of the export command, > environment.yaml writes the exported text to a YAML file environment.yaml . This file can now be shared and others will be able to create the same environment you used for the project. To create an environment from an environment file use conda env create -f environment.yaml This will create a new environment with the same name listed in environment.yaml . Listing environments If you forget what your environments are named (happens to me sometimes), use conda env list to list out all the environments you've created. You should see a list of environments, there will be an asterisk next to the environment you're currently in. The default environment, the environment used when you aren't in one, is called root . Removing environments If there are environments you don't use anymore, conda env remove -n env_name will remove the specified environment (here, named env_name ). Using environments One thing that\u2019s helped me tremendously is having separate environments for Python 2 and Python 3. I used conda create -n py2 python = 2 and conda create -n py3 python = 3 to create two separate environments, py2 and py3 . Now I have a general use environment for each Python version. In each of those environments, I've installed most of the standard data science packages (numpy, scipy, pandas, etc.) I\u2019ve also found it useful to create environments for each project I\u2019m working on. It works great for non-data related projects too like web apps with Flask. For example, I have an environment for my personal blog using Pelican . Sharing environments When sharing your code on GitHub, it's good practice to make an environment file and include it in the repository. This will make it easier for people to install all the dependencies for your code. I also usually include a pip requirements.txt file using pip freeze ( learn more here ) for people not using conda. More to learn To learn more about conda and how it fits in the Python ecosystem, check out this article by Jake Vanderplas: Conda myths and misconceptions. And here's the conda documentation you can reference later.","title":"Setting up Python Environment"},{"location":"GettingStarted/env/#python-environment","text":"","title":"Python Environment"},{"location":"GettingStarted/env/#basics","text":"To avoid errors later, it's best to update all the packages in the default environment. Open the Anaconda Prompt application. In the prompt, run the following commands: conda upgrade conda conda upgrade --all If you are seeing the following \"conda command not found\" and are using ZShell, you have to do the following: export PATH = \"/Users/username/anaconda/bin: $PATH \" or update above command line to your .zsh_config file. Once you have Anaconda installed, managing packages is fairly straightforward. To install a package, type conda install package_name in your terminal. For example, to install numpy, type conda install numpy. You can install multiple packages at the same time. Something like conda install numpy scipy pandas will install all those packages simultaneously. It's also possible to specify which version of a package you want by adding the version number such as conda install numpy = 1 .10. Conda also automatically installs dependencies for you. For example scipy depends on numpy, it uses and requires numpy. If you install just scipy (conda install scipy), Conda will also install numpy if it isn't already installed. Most of the commands are pretty intuitive. To uninstall, use conda remove package_name To update a package conda update package_name If you want to update all packages in an environment, which is often useful, use conda update --all And finally, to list installed packages, it's conda list If you don't know the exact name of the package you're looking for, you can try searching with conda search search_term For example, I know I want to install Beautiful Soup, but I'm not sure of the exact package name. So, I try conda search beautifulsoup","title":"Basics"},{"location":"GettingStarted/env/#environments","text":"Conda can be used to create environments to isolate your projects. To create an environment, use conda create -n env_name list of packages in your terminal Here -n env_name sets the name of your environment (-n for name) and list of packages is the list of packages you want installed in the environment. For example, to create an environment named my_env and install numpy in it, type conda create -n my_env numpy When creating an environment, you can specify which version of Python to install in the environment. This is useful when you're working with code in both Python 2.x and Python 3.x. To create an environment with a specific Python version, do something like conda create -n py3 python = 3 or conda create -n py2 python = 2 I actually have both of these environments on my personal computer. I use them as general environments not tied to any specific project, but rather for general work with each Python version easily accessible. These commands will install the most recent version of Python 3 and 2, respectively. To install a specific version, use conda create -n py python = 3 .3 for Python 3.3. Once you have an environment created, use source activate my_env to enter it on OSX/Linux. On Windows, use activate my_env When you're in the environment, you'll see the environment name in the terminal prompt. Something like (my_env) ~ $. The environment has only a few packages installed by default, plus the ones you installed when creating it. You can check this out with conda list. Installing packages in the environment is the same as before: conda install package_name Only this time, the specific packages you install will only be available when you're in the environment. To leave the environment, type source deactivate ( on OSX/Linux ) On Windows, use deactivate","title":"Environments"},{"location":"GettingStarted/env/#saving-and-loading-environments","text":"A really useful feature is sharing environments so others can install all the packages used in your code, with the correct versions. You can save the packages to a YAML file with conda env export > environment.yaml The first part conda env export writes out all the packages in the environment, including the Python version. Above you can see the name of the environment and all the dependencies (along with versions) are listed. The second part of the export command, > environment.yaml writes the exported text to a YAML file environment.yaml . This file can now be shared and others will be able to create the same environment you used for the project. To create an environment from an environment file use conda env create -f environment.yaml This will create a new environment with the same name listed in environment.yaml .","title":"Saving and loading environments"},{"location":"GettingStarted/env/#listing-environments","text":"If you forget what your environments are named (happens to me sometimes), use conda env list to list out all the environments you've created. You should see a list of environments, there will be an asterisk next to the environment you're currently in. The default environment, the environment used when you aren't in one, is called root .","title":"Listing environments"},{"location":"GettingStarted/env/#removing-environments","text":"If there are environments you don't use anymore, conda env remove -n env_name will remove the specified environment (here, named env_name ).","title":"Removing environments"},{"location":"GettingStarted/env/#using-environments","text":"One thing that\u2019s helped me tremendously is having separate environments for Python 2 and Python 3. I used conda create -n py2 python = 2 and conda create -n py3 python = 3 to create two separate environments, py2 and py3 . Now I have a general use environment for each Python version. In each of those environments, I've installed most of the standard data science packages (numpy, scipy, pandas, etc.) I\u2019ve also found it useful to create environments for each project I\u2019m working on. It works great for non-data related projects too like web apps with Flask. For example, I have an environment for my personal blog using Pelican .","title":"Using environments"},{"location":"GettingStarted/env/#sharing-environments","text":"When sharing your code on GitHub, it's good practice to make an environment file and include it in the repository. This will make it easier for people to install all the dependencies for your code. I also usually include a pip requirements.txt file using pip freeze ( learn more here ) for people not using conda.","title":"Sharing environments"},{"location":"GettingStarted/env/#more-to-learn","text":"To learn more about conda and how it fits in the Python ecosystem, check out this article by Jake Vanderplas: Conda myths and misconceptions. And here's the conda documentation you can reference later.","title":"More to learn"},{"location":"GettingStarted/git/","text":"How to git Reference : How to Git Create a new repository on GitHub. To avoid errors, do not initialize the new repository with README, license, or gitignore files. You can add these files after your project has been pushed to GitHub. Open Terminal. Change the current working directory to your local project. Initialize the local directory as a Git repository. git init Add the files in your new local repository. This stages them for the first commit. git add . Adds the files in the local repository and stages them for commit. To unstage a file, use 'git reset HEAD YOUR-FILE'. Commit the files that you've staged in your local repository. git commit -m \"First commit\" Commits the tracked changes and prepares them to be pushed to a remote repository. To remove this commit and modify the file, use 'git reset --soft HEAD~1' and commit and add the file again. Copy remote repository URL fieldAt the top of your GitHub repository's Quick Setup page, click to copy the remote repository URL. In Terminal, add the URL for the remote repository where your local repository will be pushed. git remote add origin remote repository URL Sets the new remote git remote -v Verifies the new remote URL Push the changes in your local repository to GitHub. git push origin master Pushes the changes in your local repository up to the remote repository you specified as the origin","title":"How to Git"},{"location":"GettingStarted/git/#how-to-git","text":"Reference : How to Git Create a new repository on GitHub. To avoid errors, do not initialize the new repository with README, license, or gitignore files. You can add these files after your project has been pushed to GitHub. Open Terminal. Change the current working directory to your local project. Initialize the local directory as a Git repository. git init Add the files in your new local repository. This stages them for the first commit. git add . Adds the files in the local repository and stages them for commit. To unstage a file, use 'git reset HEAD YOUR-FILE'. Commit the files that you've staged in your local repository. git commit -m \"First commit\" Commits the tracked changes and prepares them to be pushed to a remote repository. To remove this commit and modify the file, use 'git reset --soft HEAD~1' and commit and add the file again. Copy remote repository URL fieldAt the top of your GitHub repository's Quick Setup page, click to copy the remote repository URL. In Terminal, add the URL for the remote repository where your local repository will be pushed. git remote add origin remote repository URL Sets the new remote git remote -v Verifies the new remote URL Push the changes in your local repository to GitHub. git push origin master Pushes the changes in your local repository up to the remote repository you specified as the origin","title":"How to git"},{"location":"GettingStarted/jupyter/","text":"Installing Jupyter Notebook By far the easiest way to install Jupyter is with Anaconda. Jupyter notebooks automatically come with the distribution. You'll be able to use notebooks from the default environment. To install Jupyter notebooks in a conda environment, use conda install jupyter notebook Jupyter notebooks are also available through pip with pip install jupyter notebook Markdown Cheatsheet : https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet Convert a notebook to an HTML file, in your terminal use jupyter nbconvert --to html notebook.ipynb Convert: https://nbconvert.readthedocs.io/en/latest/usage.html To create the slideshow from the notebook file, you'll need to use nbconvert: jupyter nbconvert notebook.ipynb --to slides This just converts the notebook to the necessary files for the slideshow, but you need to serve it with an HTTP server to actually see the presentation. To convert it and immediately see it, use jupyter nbconvert notebook.ipynb --to slides --post serve This will open up the slideshow in your browser so you can present it. panda presentation: presentation","title":"Installing Jupyter Notebook"},{"location":"GettingStarted/jupyter/#installing-jupyter-notebook","text":"By far the easiest way to install Jupyter is with Anaconda. Jupyter notebooks automatically come with the distribution. You'll be able to use notebooks from the default environment. To install Jupyter notebooks in a conda environment, use conda install jupyter notebook Jupyter notebooks are also available through pip with pip install jupyter notebook Markdown Cheatsheet : https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet Convert a notebook to an HTML file, in your terminal use jupyter nbconvert --to html notebook.ipynb Convert: https://nbconvert.readthedocs.io/en/latest/usage.html To create the slideshow from the notebook file, you'll need to use nbconvert: jupyter nbconvert notebook.ipynb --to slides This just converts the notebook to the necessary files for the slideshow, but you need to serve it with an HTTP server to actually see the presentation. To convert it and immediately see it, use jupyter nbconvert notebook.ipynb --to slides --post serve This will open up the slideshow in your browser so you can present it. panda presentation: presentation","title":"Installing Jupyter Notebook"},{"location":"GettingStarted/lib/","text":"Python Libraries Following are the best Python Libraries: Numpy : For Algebraic Operation Matplotlib : For Plotting Scipy : For Scientific Computing IPython : For Python notebook Sympy : Symbolic Python Pandas : For Dataframe Seaborn : For Plotting PyData : For Pydata Plotly : For Frontend Plotting Bohek : For Front End Plotting Scikit : For Machine Learning TensorFlow : For Deep Learning","title":"Guide to Python Libraries"},{"location":"GettingStarted/lib/#python-libraries","text":"Following are the best Python Libraries: Numpy : For Algebraic Operation Matplotlib : For Plotting Scipy : For Scientific Computing IPython : For Python notebook Sympy : Symbolic Python Pandas : For Dataframe Seaborn : For Plotting PyData : For Pydata Plotly : For Frontend Plotting Bohek : For Front End Plotting Scikit : For Machine Learning TensorFlow : For Deep Learning","title":"Python Libraries"},{"location":"IO/io/","text":"Input and Output import json as json import pandas as pd import numpy as np import matplotlib.pyplot as plt import random as random % matplotlib inline #mkdir newfolder Txt file with open () method mkdir data A subdirectory or file data already exists. with open ( 'data/test.txt' , 'w' ) as file: for k in range ( 100 ): file . write( \"it is your \" + str (k) + \"th turn! \\n \" ) open() and close() method txtfile = open ( \"data/textdata.txt\" , 'w' ) for i in range ( 1000 ): '''check even or odd''' if i % 2 == 0 : txtfile . write( str (i) + \"|It is even \\n \" ) '''check above or below 500''' if i < 500 : txtfile . write( str (i) + \"|It is below 500 \\n \" ) else : txtfile . write( str (i) + \"|It is above 500 \\n \" ) else : txtfile . write( str (i) + \"|It is odd \\n \" ) '''check above or below 500''' if i < 500 : txtfile . write( str (i) + \"|It is below 500 \\n \" ) else : txtfile . write( str (i) + \"|It is above 500 \\n \" ) txtfile . close() uploading/reading text file with open ( 'data/textdata.txt' , 'r' ) as f: i = 0 for line in f: print (line) if i > 10 : break i = i + 1 0|It is even 0|It is below 500 1|It is odd 1|It is below 500 2|It is even 2|It is below 500 3|It is odd 3|It is below 500 4|It is even 4|It is below 500 5|It is odd 5|It is below 500 JSON file Data = [] for k in range ( 1000 ): Data . append({ \"x\" : np . random . uniform( 0 , 10 ),\\ \"y\" : np . random . uniform( 0 , 20 ),\\ \"z\" : np . random . uniform( 0 , 10 )}) Data[ 101 : 105 ] [{'x': 6.1054636810164595, 'y': 3.2863675264349634, 'z': 8.384891787980322}, {'x': 7.069985836956237, 'y': 0.17988344698211423, 'z': 9.975981385348762}, {'x': 2.7021265268361416, 'y': 9.729258889243164, 'z': 9.894201832125768}, {'x': 6.418458045982539, 'y': 12.858408084598345, 'z': 5.91904399119246}] Save data to a JSON file mkdir data A subdirectory or file data already exists. with open ( \"data/sample_data.json\" , 'w' ) as f: json . dump(Data,f) Upload data from JSON file with open ( \"data/sample_data.json\" , \"r\" ) as f: uploaded_data = json . load(f) uploaded_data[ 0 : 2 ] [{'x': 0.6982478944780635, 'y': 1.126719593276797, 'z': 0.4844149246453111}, {'x': 9.508377504777027, 'y': 15.488536320226022, 'z': 2.7307796829523037}] CSV file DF = pd . DataFrame(Data) DF . head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } x y z 0 0.698248 1.126720 0.484415 1 9.508378 15.488536 2.730780 2 7.248392 1.646036 5.782741 3 5.829758 4.888937 7.824382 4 3.174409 19.844952 4.117781 Save data to a CSV file DF . to_csv( \"data/sampledata.csv\" ) Upload data from a CSV file uploaded_data = pd . read_csv( \"data/sampledata.csv\" ) uploaded_data . head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Unnamed: 0 x y z 0 0 0.698248 1.126720 0.484415 1 1 9.508378 15.488536 2.730780 2 2 7.248392 1.646036 5.782741 3 3 5.829758 4.888937 7.824382 4 4 3.174409 19.844952 4.117781","title":"Input Output"},{"location":"IO/io/#input-and-output","text":"import json as json import pandas as pd import numpy as np import matplotlib.pyplot as plt import random as random % matplotlib inline #mkdir newfolder","title":"Input and Output"},{"location":"IO/io/#txt-file","text":"with open () method mkdir data A subdirectory or file data already exists. with open ( 'data/test.txt' , 'w' ) as file: for k in range ( 100 ): file . write( \"it is your \" + str (k) + \"th turn! \\n \" ) open() and close() method txtfile = open ( \"data/textdata.txt\" , 'w' ) for i in range ( 1000 ): '''check even or odd''' if i % 2 == 0 : txtfile . write( str (i) + \"|It is even \\n \" ) '''check above or below 500''' if i < 500 : txtfile . write( str (i) + \"|It is below 500 \\n \" ) else : txtfile . write( str (i) + \"|It is above 500 \\n \" ) else : txtfile . write( str (i) + \"|It is odd \\n \" ) '''check above or below 500''' if i < 500 : txtfile . write( str (i) + \"|It is below 500 \\n \" ) else : txtfile . write( str (i) + \"|It is above 500 \\n \" ) txtfile . close() uploading/reading text file with open ( 'data/textdata.txt' , 'r' ) as f: i = 0 for line in f: print (line) if i > 10 : break i = i + 1 0|It is even 0|It is below 500 1|It is odd 1|It is below 500 2|It is even 2|It is below 500 3|It is odd 3|It is below 500 4|It is even 4|It is below 500 5|It is odd 5|It is below 500","title":"Txt file"},{"location":"IO/io/#json-file","text":"Data = [] for k in range ( 1000 ): Data . append({ \"x\" : np . random . uniform( 0 , 10 ),\\ \"y\" : np . random . uniform( 0 , 20 ),\\ \"z\" : np . random . uniform( 0 , 10 )}) Data[ 101 : 105 ] [{'x': 6.1054636810164595, 'y': 3.2863675264349634, 'z': 8.384891787980322}, {'x': 7.069985836956237, 'y': 0.17988344698211423, 'z': 9.975981385348762}, {'x': 2.7021265268361416, 'y': 9.729258889243164, 'z': 9.894201832125768}, {'x': 6.418458045982539, 'y': 12.858408084598345, 'z': 5.91904399119246}] Save data to a JSON file mkdir data A subdirectory or file data already exists. with open ( \"data/sample_data.json\" , 'w' ) as f: json . dump(Data,f) Upload data from JSON file with open ( \"data/sample_data.json\" , \"r\" ) as f: uploaded_data = json . load(f) uploaded_data[ 0 : 2 ] [{'x': 0.6982478944780635, 'y': 1.126719593276797, 'z': 0.4844149246453111}, {'x': 9.508377504777027, 'y': 15.488536320226022, 'z': 2.7307796829523037}]","title":"JSON file"},{"location":"IO/io/#csv-file","text":"DF = pd . DataFrame(Data) DF . head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } x y z 0 0.698248 1.126720 0.484415 1 9.508378 15.488536 2.730780 2 7.248392 1.646036 5.782741 3 5.829758 4.888937 7.824382 4 3.174409 19.844952 4.117781 Save data to a CSV file DF . to_csv( \"data/sampledata.csv\" ) Upload data from a CSV file uploaded_data = pd . read_csv( \"data/sampledata.csv\" ) uploaded_data . head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Unnamed: 0 x y z 0 0 0.698248 1.126720 0.484415 1 1 9.508378 15.488536 2.730780 2 2 7.248392 1.646036 5.782741 3 3 5.829758 4.888937 7.824382 4 4 3.174409 19.844952 4.117781","title":"CSV file"},{"location":"Index/","text":"Index Why Codes? Getting started Guide to starting Python Guide to Python Libraries Introduction to Programming Fundamental DataStructure Loops and Condition Function and Class Input-Output Projects - Project Fern - Project Random Walk - Project N-charges - Project Diffusion Numpy Array and ND Array Product and Tensor Product Grid and MeshGrid Linear Algebra Statistics Scipy Integration Differential Equations Optimization Roots Interpolation Fitting Pandas Dataframe Indexing Data Exploration GroupBy Lambda Transform Basic Visualization Matplotlib Seaborn Pandas Bohek Plotly","title":"Index"},{"location":"Index/#index","text":"Why Codes? Getting started Guide to starting Python Guide to Python Libraries Introduction to Programming Fundamental DataStructure Loops and Condition Function and Class Input-Output Projects - Project Fern - Project Random Walk - Project N-charges - Project Diffusion Numpy Array and ND Array Product and Tensor Product Grid and MeshGrid Linear Algebra Statistics Scipy Integration Differential Equations Optimization Roots Interpolation Fitting Pandas Dataframe Indexing Data Exploration GroupBy Lambda Transform Basic Visualization Matplotlib Seaborn Pandas Bohek Plotly","title":"Index"},{"location":"LoopsConditions/lnc/","text":"Loops and conditions Loops provide the method of iteration while condition allows or blocks the code execution when specified condition is meet. For llop and While Loop To iterate over the List. Lets prin the items in the list L = [ 'apple' , 'banana' , 'kite' , 'cellphone' ] for item in L: print (item) apple banana kite cellphone What is range? range ( 5 ), range ( 1 , 100 ), sum ( range ( 100 )) (range(0, 5), range(1, 100), 4950) To iterate with for loop and adding the iterating index (the value of 10*k ) to a blank List L . L = [] for k in range ( 10 ): L . append( 10 * k) L [0, 10, 20, 30, 40, 50, 60, 70, 80, 90] To create a double loop also called nested for loop . Lets create double for loop with i and j with range 5 and also populate the dictionary with key as (i,j) and value as 10*i+j when i=j and 100*1+j when i!=j . D = {} for i in range ( 5 ): for j in range ( 5 ): if i == j : D . update({(i,j) : 10 * i + j}) elif i != j: D . update({(i,j) : 100 * i + j}) print (D) {(0, 0): 0, (0, 1): 1, (0, 2): 2, (0, 3): 3, (0, 4): 4, (1, 0): 100, (1, 1): 11, (1, 2): 102, (1, 3): 103, (1, 4): 104, (2, 0): 200, (2, 1): 201, (2, 2): 22, (2, 3): 203, (2, 4): 204, (3, 0): 300, (3, 1): 301, (3, 2): 302, (3, 3): 33, (3, 4): 304, (4, 0): 400, (4, 1): 401, (4, 2): 402, (4, 3): 403, (4, 4): 44} To iterate two elements from two seperate Lists. It is not like nested for loop. for item,j,k in zip ([ 'apple' , 'banana' , 'kite' , 'cellphone' , 'pen' ],\\ range ( 5 ),[ 12 , 45 , 45 , 67 , 34 ]): print (item, \"|\" ,j, \"|\" ,k) apple | 0 | 12 banana | 1 | 45 kite | 2 | 45 cellphone | 3 | 67 pen | 4 | 34 To iterate and ennumerate both together. for i,item in enumerate ([ 'apple' , 'banana' , 'kite' , 'cellphone' ]): print ( \"The\" ,i, \"th element is: \" , item) The 0 th element is: apple The 1 th element is: banana The 2 th element is: kite The 3 th element is: cellphone To create a list with for loop A = [ 10 * k ** 2 + 5 * k + 1 for k in range ( 10 )] print (A) [1, 16, 51, 106, 181, 276, 391, 526, 681, 856] AA = [[ 10 * x ** 2 + 5 * y + 1 for x in range ( 3 )] for y in range ( 3 )] print (AA) [[1, 11, 41], [6, 16, 46], [11, 21, 51]] To iterate over List of List for i in range ( 3 ): for j in range ( 3 ): print ( \"The\" , \"(\" ,i, \",\" ,j, \")\" , \"th element is: \" ,AA[i][j]) The ( 0 , 0 ) th element is: 1 The ( 0 , 1 ) th element is: 11 The ( 0 , 2 ) th element is: 41 The ( 1 , 0 ) th element is: 6 The ( 1 , 1 ) th element is: 16 The ( 1 , 2 ) th element is: 46 The ( 2 , 0 ) th element is: 11 The ( 2 , 1 ) th element is: 21 The ( 2 , 2 ) th element is: 51 To use while loop. i = 0 while i < 5 : print ( i, \"th turn\" ) i = i + 1 0 th turn 1 th turn 2 th turn 3 th turn 4 th turn To break for loop implementing if condition for i in range ( 10 ): print (i) if i == 3 : break 0 1 2 3 To test the if conditions: import random as random for i in range ( 10 ): r = random . uniform( 1 , 10 ) if r < 2 and r > 0 : print ( \"It is samaller then 2 and greater then 1\" , \"|\" , r) elif r < 4 and r > 2 : print ( \"It is samaller then 4 and greater then 2\" , \"|\" , r) elif r < 6 and r > 4 : print ( \"It is samaller then 6 and greater then 4\" , \"|\" , r) elif r < 8 and r > 6 : print ( \"It is samaller then 8 and greater then 6\" , \"|\" , r) elif r < 10 and r > 8 : print ( \"It is samaller then 10 and greater then 8\" , \"|\" , r) It is samaller then 10 and greater then 8 | 8.910435750481426 It is samaller then 8 and greater then 6 | 6.616669779231224 It is samaller then 4 and greater then 2 | 3.8009645328925896 It is samaller then 4 and greater then 2 | 3.3039198434839117 It is samaller then 4 and greater then 2 | 3.2192327041596696 It is samaller then 10 and greater then 8 | 8.658302824387317 It is samaller then 10 and greater then 8 | 9.048987906482312 It is samaller then 10 and greater then 8 | 8.061577985253708 It is samaller then 8 and greater then 6 | 6.301327115111054 It is samaller then 6 and greater then 4 | 5.316492901781898 To find sum from 0 to 1000 s = 0 for i in range ( 1000 + 1 ): s = s + i s 500500 To find sum from 0 to 1000 (only even) s = 0 LE = [] for i in range ( 1001 ): if i % 2 == 0 : LE . append(i) s = s + i s, sum (LE) (250500, 250500) References: https://docs.python.org/3/tutorial/index.html","title":"Loops and Conditions"},{"location":"LoopsConditions/lnc/#loops-and-conditions","text":"Loops provide the method of iteration while condition allows or blocks the code execution when specified condition is meet.","title":"Loops and conditions"},{"location":"LoopsConditions/lnc/#for-llop-and-while-loop","text":"To iterate over the List. Lets prin the items in the list L = [ 'apple' , 'banana' , 'kite' , 'cellphone' ] for item in L: print (item) apple banana kite cellphone What is range? range ( 5 ), range ( 1 , 100 ), sum ( range ( 100 )) (range(0, 5), range(1, 100), 4950) To iterate with for loop and adding the iterating index (the value of 10*k ) to a blank List L . L = [] for k in range ( 10 ): L . append( 10 * k) L [0, 10, 20, 30, 40, 50, 60, 70, 80, 90] To create a double loop also called nested for loop . Lets create double for loop with i and j with range 5 and also populate the dictionary with key as (i,j) and value as 10*i+j when i=j and 100*1+j when i!=j . D = {} for i in range ( 5 ): for j in range ( 5 ): if i == j : D . update({(i,j) : 10 * i + j}) elif i != j: D . update({(i,j) : 100 * i + j}) print (D) {(0, 0): 0, (0, 1): 1, (0, 2): 2, (0, 3): 3, (0, 4): 4, (1, 0): 100, (1, 1): 11, (1, 2): 102, (1, 3): 103, (1, 4): 104, (2, 0): 200, (2, 1): 201, (2, 2): 22, (2, 3): 203, (2, 4): 204, (3, 0): 300, (3, 1): 301, (3, 2): 302, (3, 3): 33, (3, 4): 304, (4, 0): 400, (4, 1): 401, (4, 2): 402, (4, 3): 403, (4, 4): 44} To iterate two elements from two seperate Lists. It is not like nested for loop. for item,j,k in zip ([ 'apple' , 'banana' , 'kite' , 'cellphone' , 'pen' ],\\ range ( 5 ),[ 12 , 45 , 45 , 67 , 34 ]): print (item, \"|\" ,j, \"|\" ,k) apple | 0 | 12 banana | 1 | 45 kite | 2 | 45 cellphone | 3 | 67 pen | 4 | 34 To iterate and ennumerate both together. for i,item in enumerate ([ 'apple' , 'banana' , 'kite' , 'cellphone' ]): print ( \"The\" ,i, \"th element is: \" , item) The 0 th element is: apple The 1 th element is: banana The 2 th element is: kite The 3 th element is: cellphone To create a list with for loop A = [ 10 * k ** 2 + 5 * k + 1 for k in range ( 10 )] print (A) [1, 16, 51, 106, 181, 276, 391, 526, 681, 856] AA = [[ 10 * x ** 2 + 5 * y + 1 for x in range ( 3 )] for y in range ( 3 )] print (AA) [[1, 11, 41], [6, 16, 46], [11, 21, 51]] To iterate over List of List for i in range ( 3 ): for j in range ( 3 ): print ( \"The\" , \"(\" ,i, \",\" ,j, \")\" , \"th element is: \" ,AA[i][j]) The ( 0 , 0 ) th element is: 1 The ( 0 , 1 ) th element is: 11 The ( 0 , 2 ) th element is: 41 The ( 1 , 0 ) th element is: 6 The ( 1 , 1 ) th element is: 16 The ( 1 , 2 ) th element is: 46 The ( 2 , 0 ) th element is: 11 The ( 2 , 1 ) th element is: 21 The ( 2 , 2 ) th element is: 51 To use while loop. i = 0 while i < 5 : print ( i, \"th turn\" ) i = i + 1 0 th turn 1 th turn 2 th turn 3 th turn 4 th turn To break for loop implementing if condition for i in range ( 10 ): print (i) if i == 3 : break 0 1 2 3 To test the if conditions: import random as random for i in range ( 10 ): r = random . uniform( 1 , 10 ) if r < 2 and r > 0 : print ( \"It is samaller then 2 and greater then 1\" , \"|\" , r) elif r < 4 and r > 2 : print ( \"It is samaller then 4 and greater then 2\" , \"|\" , r) elif r < 6 and r > 4 : print ( \"It is samaller then 6 and greater then 4\" , \"|\" , r) elif r < 8 and r > 6 : print ( \"It is samaller then 8 and greater then 6\" , \"|\" , r) elif r < 10 and r > 8 : print ( \"It is samaller then 10 and greater then 8\" , \"|\" , r) It is samaller then 10 and greater then 8 | 8.910435750481426 It is samaller then 8 and greater then 6 | 6.616669779231224 It is samaller then 4 and greater then 2 | 3.8009645328925896 It is samaller then 4 and greater then 2 | 3.3039198434839117 It is samaller then 4 and greater then 2 | 3.2192327041596696 It is samaller then 10 and greater then 8 | 8.658302824387317 It is samaller then 10 and greater then 8 | 9.048987906482312 It is samaller then 10 and greater then 8 | 8.061577985253708 It is samaller then 8 and greater then 6 | 6.301327115111054 It is samaller then 6 and greater then 4 | 5.316492901781898 To find sum from 0 to 1000 s = 0 for i in range ( 1000 + 1 ): s = s + i s 500500 To find sum from 0 to 1000 (only even) s = 0 LE = [] for i in range ( 1001 ): if i % 2 == 0 : LE . append(i) s = s + i s, sum (LE) (250500, 250500)","title":"For llop and While Loop"},{"location":"LoopsConditions/lnc/#references","text":"https://docs.python.org/3/tutorial/index.html","title":"References:"},{"location":"Projects/Diffusion/Diffusion/","text":"Diffusion Patterns The 2D Diffusion problem is : \\( \\large{ \\frac{\\partial U}{\\partial t} = D\\left(\\frac{\\partial^2U}{\\partial x^2} + \\frac{\\partial^2U}{\\partial y^2}\\right)} \\) Source import numpy as np import random as random import math as math import matplotlib.pyplot as plt import seaborn as sns sns . set() Consider a 2D lattice of length L L = 10 Create initial configuration: We can use a vacant list to create initial configuration where initially particle is at middle of the lattice. def start (L): '''create a vacant list of list ''' P = [[ 0 for i in range (L)] for j in range (L)] '''put particle at center''' P[ int (L / 2 )][ int (L / 2 )] = 1 return P P = start(L) P [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]] Make a plot of the lattice. plt . figure(figsize = [ 4 , 3 ]) sns . heatmap(P,annot = True ,cmap = 'YlGn' ) <matplotlib.axes._subplots.AxesSubplot at 0x7fc8fdae7790> Create a function to diffuse a particle: \\( P[i,j] = P[i+1,j] + P[i-1,j] + P[i,j+1] + P[i,j-1] \\) def diffuse_primitive (P,L): '''create vacant list of list''' PP = [[ 0 for i in range (L)] for j in range (L)] for i in range (L): for j in range (L): '''diffuse one step''' PP[i][j] = P[i + 1 ][j] + P[i - 1 ][j] + P[i][j + 1 ] + P[i][j - 1 ] '''normalize''' PP = PP / np . sum(PP) return PP L = 10 P = start(L) Set boundary conditons Lower limit P[0-1,j] = P[L,j] P[I,0-1] = P[i,L] Upper limit P[L+1,j] = P[o,j] P[i,L+1] = P[i,0] def diffuse (P,L): '''create vacant list of list''' PP = [[ 0 for i in range (L)] for j in range (L)] '''diffuse 1-step over supplied configuration''' for i in range (L): for j in range (L): '''set boundary condition at bottom and left''' ni = 0 ; nj = 0 if i == 0 :ni = L if j == 0 :nj = L '''add modulo to control boundary at top and right''' PP[i][j] = P[(i + 1 ) % L][j] + P[(i - 1 ) + ni][j]\\ + P[i][(j + 1 ) % L] + P[i][(j - 1 ) + nj] '''normalize''' PP = PP / np . sum(PP) return PP L = 10 P = start(L) plt . figure(figsize = [ 12 , 10 ]) plt . subplot( 3 , 3 , 1 ) P = diffuse(P,L) sns . heatmap(P,annot = False ,cmap = 'YlGn' ) plt . subplot( 3 , 3 , 2 ) P = diffuse(P,L) sns . heatmap(P,annot = False ,cmap = 'YlGn' ) plt . subplot( 3 , 3 , 3 ) P = diffuse(P,L) sns . heatmap(P,annot = False ,cmap = 'YlGn' ) plt . subplot( 3 , 3 , 4 ) P = diffuse(P,L) sns . heatmap(P,annot = False ,cmap = 'YlGn' ) plt . subplot( 3 , 3 , 5 ) P = diffuse(P,L) sns . heatmap(P,annot = False ,cmap = 'YlGn' ) plt . subplot( 3 , 3 , 6 ) P = diffuse(P,L) sns . heatmap(P,annot = False ,cmap = 'YlGn' ) plt . subplot( 3 , 3 , 7 ) P = diffuse(P,L) sns . heatmap(P,annot = False ,cmap = 'YlGn' ) plt . subplot( 3 , 3 , 8 ) P = diffuse(P,L) sns . heatmap(P,annot = False ,cmap = 'YlGn' ) plt . subplot( 3 , 3 , 9 ) P = diffuse(P,L) sns . heatmap(P,annot = False ,cmap = 'YlGn' ) plt . show() Run the diffusion step with desire no of running steps def run_diffuse (P,nrun,L): run = 0 '''diffuse N times''' while run < nrun: P = diffuse(P,L) run = run + 1 return P We can make a plot of arbitraty diffusion step by selecting irun in function runner. '''set parameters''' L = 100 ; nrun = 1000 ; P = start(L) '''run diffusion''' P = run_diffuse(P,nrun,L) plt . figure(figsize = [ 12 , 10 ]) sns . heatmap(P,annot = False ,cmap = 'YlGn' ) plt . axis( False ) plt . show() Much Finner L = 200 nrun = 1000 P = start(L) '''run diffusion''' P = run_diffuse(P,nrun,L) plt . figure(figsize = [ 12 , 10 ]) sns . heatmap(P,annot = False ,cmap = 'YlGn' ) plt . axis( False ) plt . show()","title":"Project Diffusion"},{"location":"Projects/Diffusion/Diffusion/#diffusion-patterns","text":"The 2D Diffusion problem is : \\( \\large{ \\frac{\\partial U}{\\partial t} = D\\left(\\frac{\\partial^2U}{\\partial x^2} + \\frac{\\partial^2U}{\\partial y^2}\\right)} \\) Source import numpy as np import random as random import math as math import matplotlib.pyplot as plt import seaborn as sns sns . set() Consider a 2D lattice of length L L = 10 Create initial configuration: We can use a vacant list to create initial configuration where initially particle is at middle of the lattice. def start (L): '''create a vacant list of list ''' P = [[ 0 for i in range (L)] for j in range (L)] '''put particle at center''' P[ int (L / 2 )][ int (L / 2 )] = 1 return P P = start(L) P [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]] Make a plot of the lattice. plt . figure(figsize = [ 4 , 3 ]) sns . heatmap(P,annot = True ,cmap = 'YlGn' ) <matplotlib.axes._subplots.AxesSubplot at 0x7fc8fdae7790> Create a function to diffuse a particle: \\( P[i,j] = P[i+1,j] + P[i-1,j] + P[i,j+1] + P[i,j-1] \\) def diffuse_primitive (P,L): '''create vacant list of list''' PP = [[ 0 for i in range (L)] for j in range (L)] for i in range (L): for j in range (L): '''diffuse one step''' PP[i][j] = P[i + 1 ][j] + P[i - 1 ][j] + P[i][j + 1 ] + P[i][j - 1 ] '''normalize''' PP = PP / np . sum(PP) return PP L = 10 P = start(L) Set boundary conditons Lower limit P[0-1,j] = P[L,j] P[I,0-1] = P[i,L] Upper limit P[L+1,j] = P[o,j] P[i,L+1] = P[i,0] def diffuse (P,L): '''create vacant list of list''' PP = [[ 0 for i in range (L)] for j in range (L)] '''diffuse 1-step over supplied configuration''' for i in range (L): for j in range (L): '''set boundary condition at bottom and left''' ni = 0 ; nj = 0 if i == 0 :ni = L if j == 0 :nj = L '''add modulo to control boundary at top and right''' PP[i][j] = P[(i + 1 ) % L][j] + P[(i - 1 ) + ni][j]\\ + P[i][(j + 1 ) % L] + P[i][(j - 1 ) + nj] '''normalize''' PP = PP / np . sum(PP) return PP L = 10 P = start(L) plt . figure(figsize = [ 12 , 10 ]) plt . subplot( 3 , 3 , 1 ) P = diffuse(P,L) sns . heatmap(P,annot = False ,cmap = 'YlGn' ) plt . subplot( 3 , 3 , 2 ) P = diffuse(P,L) sns . heatmap(P,annot = False ,cmap = 'YlGn' ) plt . subplot( 3 , 3 , 3 ) P = diffuse(P,L) sns . heatmap(P,annot = False ,cmap = 'YlGn' ) plt . subplot( 3 , 3 , 4 ) P = diffuse(P,L) sns . heatmap(P,annot = False ,cmap = 'YlGn' ) plt . subplot( 3 , 3 , 5 ) P = diffuse(P,L) sns . heatmap(P,annot = False ,cmap = 'YlGn' ) plt . subplot( 3 , 3 , 6 ) P = diffuse(P,L) sns . heatmap(P,annot = False ,cmap = 'YlGn' ) plt . subplot( 3 , 3 , 7 ) P = diffuse(P,L) sns . heatmap(P,annot = False ,cmap = 'YlGn' ) plt . subplot( 3 , 3 , 8 ) P = diffuse(P,L) sns . heatmap(P,annot = False ,cmap = 'YlGn' ) plt . subplot( 3 , 3 , 9 ) P = diffuse(P,L) sns . heatmap(P,annot = False ,cmap = 'YlGn' ) plt . show() Run the diffusion step with desire no of running steps def run_diffuse (P,nrun,L): run = 0 '''diffuse N times''' while run < nrun: P = diffuse(P,L) run = run + 1 return P We can make a plot of arbitraty diffusion step by selecting irun in function runner. '''set parameters''' L = 100 ; nrun = 1000 ; P = start(L) '''run diffusion''' P = run_diffuse(P,nrun,L) plt . figure(figsize = [ 12 , 10 ]) sns . heatmap(P,annot = False ,cmap = 'YlGn' ) plt . axis( False ) plt . show()","title":"Diffusion Patterns"},{"location":"Projects/Diffusion/Diffusion/#much-finner","text":"L = 200 nrun = 1000 P = start(L) '''run diffusion''' P = run_diffuse(P,nrun,L) plt . figure(figsize = [ 12 , 10 ]) sns . heatmap(P,annot = False ,cmap = 'YlGn' ) plt . axis( False ) plt . show()","title":"Much Finner"},{"location":"Projects/Fern/fern/","text":"Project: Fractals Fern : Fern can be created by implementation of if loops and while loop . We will discuss three different approaches to create fern. Method 1: Direct implementation import matplotlib.pyplot as plt import seaborn as sns import random as random % matplotlib inline sns . set() import random as random x = 0 y = 0 X = [x] Y = [y] n = 1 isprint = False while n < 1000000 : r = random . uniform( 0 , 100 ) if r < 1.0 : x = 0 y = 0.16 * Y[n - 1 ] X . append(x) ; Y . append(y) elif r > 1.0 and r < 86.0 : x = 0.85 * X[n - 1 ] + 0.04 * Y[n - 1 ] y = - 0.04 * X[n - 1 ] + 0.85 * Y[n - 1 ] + 1.6 X . append(x);Y . append(y) elif r > 86.0 and r < 93.0 : x = 0.2 * X[n - 1 ] - 0.26 * Y[n - 1 ] y = 0.23 * X[n - 1 ] + 0.22 * Y[n - 1 ] + 1.6 X . append(x);Y . append(y) elif r > 93.0 and r < 100.0 : x = - 0.15 * X[n - 1 ] + 0.28 * Y[n - 1 ] y = 0.26 * X[n - 1 ] + 0.24 * Y[n - 1 ] + 0.44 X . append(x);Y . append(y) if isprint: print ( \"step: \" ,n, \"random number is: \" , r, \"coordinate is : \" , x,y) n = n + 1 plt . figure(figsize = [ 5 , 8 ]) plt . scatter(X,Y,color = 'g' ,marker = '.' ) plt . show() Method-2 : Manual Matrix Multiplication In this method we first define matrices. Then we will manually multiply these matrices to get desired plot of fern. This correspond to the following transformations: \\( f_{1}(x,y)={\\begin{bmatrix}\\ 0.00 & \\ 0.00\\ \\\\ 0.00&\\ 0.16\\end{bmatrix}}{\\begin{bmatrix}\\ x \\\\ y\\end{bmatrix}} \\) \\( f_{2}(x,y)={\\begin{bmatrix}\\ 0.85&\\ 0.04\\ \\\\ -0.04&\\ 0.85\\end{bmatrix}}{\\begin{bmatrix}\\ x \\\\ y\\end{bmatrix}}+{\\begin{bmatrix}\\ 0.00 \\\\ 1.60\\end{bmatrix}} \\) \\( f_{3}(x,y)={\\begin{bmatrix}\\ 0.20&\\ -0.26\\ \\\\ 0.23&\\ 0.22\\end{bmatrix}}{\\begin{bmatrix}\\ x \\\\ y\\end{bmatrix}}+{\\begin{bmatrix}\\ 0.00 \\\\ 1.60\\end{bmatrix}} \\) \\( f_{4}(x,y)={\\begin{bmatrix}\\ -0.15&\\ 0.28\\ \\\\ 0.26&\\ 0.24\\end{bmatrix}}{\\begin{bmatrix}\\ x \\\\ y\\end{bmatrix}}+{\\begin{bmatrix}\\ 0.00 \\\\ 0.44\\end{bmatrix}} \\) import numpy as np To define number of iteration. ITR = 100000 To define matrices using numpy x = np . array([[ 0.0 , 0.0 ] for k in range (ITR)]) A = np . array([[ 0.0 , 0.0 ],[ 0.0 , 0.16 ]]) B = np . array([[ 0.85 , 0.04 ],[ - 0.04 , 0.85 ]]) C = np . array([[ 0.20 , - 0.26 ],[ 0.23 , 0.22 ]]) D = np . array([[ - 0.15 , 0.28 ],[ 0.26 , 0.24 ]]) AD = np . array([[ 0.0 , 0.0 ], [ 0.0 , 1.6 ], [ 0.0 , 1.6 ], [ 0.0 , 0.44 ]]) To implement transformation X = [] Y = [] x[ 0 , 0 ] = 0.0 x[ 0 , 1 ] = 0.0 t = 0 while t < ITR: ct = random . uniform( 0 , 100 ) '''First condition''' if ct < 1.0 : for p in range ( 2 ): x[t,p] = 0.0 for q in range ( 2 ): x[t,p] = x[t,p] + A[p,q] * x[t - 1 ,q] '''second condition''' elif ct > 1.0 and ct < 86.0 : for p in range ( 2 ): x[t,p] = 0.0 for q in range ( 2 ): x[t,p] = x[t,p] + B[p,q] * x[t - 1 ,q] for p in range ( 2 ): x[t,p] = x[t,p] + AD[ 1 ,p] '''third condition''' elif ct > 86.0 and ct < 93.0 : for p in range ( 2 ): x[t,p] = 0.0 for q in range ( 2 ): x[t,p] = x[t,p] + C[p,q] * x[t - 1 ,q] for p in range ( 2 ): x[t,p] = x[t,p] + AD[ 2 ,p] '''fourth condition ''' elif ct > 93.0 and ct < 100.0 : for p in range ( 2 ): x[ 1 ,p] = 0.0 for q in range ( 2 ): x[t,p] = x[t,p] + D[p,q] * x[t - 1 ,q] for p in range ( 2 ): x[t,p] = x[t,p] + AD[ 3 ,p] X . append(x[t, 0 ]) Y . append(x[t, 1 ]) t = t + 1 To get the plot plt . figure(figsize = [ 5 , 8 ]) plt . scatter(X,Y,color = 'blue' ,marker = '.' ) plt . show() Method 3-Numpy In this case we first define the matrices and implement numpy library to make products. To define Matrices '''Matrices''' A = np . array([[ 0.0 , 0.0 ],[ 0.0 , 0.16 ]]) B = np . array([[ 0.85 , 0.04 ],[ - 0.04 , 0.85 ]]) C = np . array([[ 0.20 , - 0.26 ],[ 0.23 , 0.22 ]]) D = np . array([[ - 0.15 , 0.28 ],[ 0.26 , 0.24 ]]) AD = np . array([[ 0.0 , 0.0 ], [ 0.0 , 1.6 ], [ 0.0 , 1.6 ], [ 0.0 , 0.44 ]]) To implement transformation u = np . array([ 0 , 0 ]) U = [u] n = 1 while n < 1000 : '''generate a random number''' r = random . uniform( 0 , 100 ) '''1rst condition''' if r < 1.0 : u = np . dot(A,u) U . append(u) '''second condition''' elif r > 1.0 and r < 86.0 : u = np . dot(B,u) + AD[ 1 ] U . append(u) '''third condition''' elif r > 86.0 and r < 93.0 : u = np . dot(C,u) + AD[ 2 ] U . append(u) '''fourth condition''' elif r > 93.0 and r < 100.0 : u = np . dot(D,u) + AD[ 3 ] U . append(u) '''update n''' n = n + 1 To get plot plt . figure(figsize = [ 5 , 8 ]) for item in U: plt . scatter(item[ 0 ],item[ 1 ],color = 'orange' ,marker = '.' ) plt . show()","title":"Project Fern"},{"location":"Projects/Fern/fern/#project-fractals","text":"","title":"Project: Fractals"},{"location":"Projects/Fern/fern/#fern","text":"Fern can be created by implementation of if loops and while loop . We will discuss three different approaches to create fern.","title":"Fern :"},{"location":"Projects/Fern/fern/#method-1-direct-implementation","text":"import matplotlib.pyplot as plt import seaborn as sns import random as random % matplotlib inline sns . set() import random as random x = 0 y = 0 X = [x] Y = [y] n = 1 isprint = False while n < 1000000 : r = random . uniform( 0 , 100 ) if r < 1.0 : x = 0 y = 0.16 * Y[n - 1 ] X . append(x) ; Y . append(y) elif r > 1.0 and r < 86.0 : x = 0.85 * X[n - 1 ] + 0.04 * Y[n - 1 ] y = - 0.04 * X[n - 1 ] + 0.85 * Y[n - 1 ] + 1.6 X . append(x);Y . append(y) elif r > 86.0 and r < 93.0 : x = 0.2 * X[n - 1 ] - 0.26 * Y[n - 1 ] y = 0.23 * X[n - 1 ] + 0.22 * Y[n - 1 ] + 1.6 X . append(x);Y . append(y) elif r > 93.0 and r < 100.0 : x = - 0.15 * X[n - 1 ] + 0.28 * Y[n - 1 ] y = 0.26 * X[n - 1 ] + 0.24 * Y[n - 1 ] + 0.44 X . append(x);Y . append(y) if isprint: print ( \"step: \" ,n, \"random number is: \" , r, \"coordinate is : \" , x,y) n = n + 1 plt . figure(figsize = [ 5 , 8 ]) plt . scatter(X,Y,color = 'g' ,marker = '.' ) plt . show()","title":"Method 1: Direct implementation"},{"location":"Projects/Fern/fern/#method-2-manual-matrix-multiplication","text":"In this method we first define matrices. Then we will manually multiply these matrices to get desired plot of fern. This correspond to the following transformations: \\( f_{1}(x,y)={\\begin{bmatrix}\\ 0.00 & \\ 0.00\\ \\\\ 0.00&\\ 0.16\\end{bmatrix}}{\\begin{bmatrix}\\ x \\\\ y\\end{bmatrix}} \\) \\( f_{2}(x,y)={\\begin{bmatrix}\\ 0.85&\\ 0.04\\ \\\\ -0.04&\\ 0.85\\end{bmatrix}}{\\begin{bmatrix}\\ x \\\\ y\\end{bmatrix}}+{\\begin{bmatrix}\\ 0.00 \\\\ 1.60\\end{bmatrix}} \\) \\( f_{3}(x,y)={\\begin{bmatrix}\\ 0.20&\\ -0.26\\ \\\\ 0.23&\\ 0.22\\end{bmatrix}}{\\begin{bmatrix}\\ x \\\\ y\\end{bmatrix}}+{\\begin{bmatrix}\\ 0.00 \\\\ 1.60\\end{bmatrix}} \\) \\( f_{4}(x,y)={\\begin{bmatrix}\\ -0.15&\\ 0.28\\ \\\\ 0.26&\\ 0.24\\end{bmatrix}}{\\begin{bmatrix}\\ x \\\\ y\\end{bmatrix}}+{\\begin{bmatrix}\\ 0.00 \\\\ 0.44\\end{bmatrix}} \\) import numpy as np To define number of iteration. ITR = 100000 To define matrices using numpy x = np . array([[ 0.0 , 0.0 ] for k in range (ITR)]) A = np . array([[ 0.0 , 0.0 ],[ 0.0 , 0.16 ]]) B = np . array([[ 0.85 , 0.04 ],[ - 0.04 , 0.85 ]]) C = np . array([[ 0.20 , - 0.26 ],[ 0.23 , 0.22 ]]) D = np . array([[ - 0.15 , 0.28 ],[ 0.26 , 0.24 ]]) AD = np . array([[ 0.0 , 0.0 ], [ 0.0 , 1.6 ], [ 0.0 , 1.6 ], [ 0.0 , 0.44 ]]) To implement transformation X = [] Y = [] x[ 0 , 0 ] = 0.0 x[ 0 , 1 ] = 0.0 t = 0 while t < ITR: ct = random . uniform( 0 , 100 ) '''First condition''' if ct < 1.0 : for p in range ( 2 ): x[t,p] = 0.0 for q in range ( 2 ): x[t,p] = x[t,p] + A[p,q] * x[t - 1 ,q] '''second condition''' elif ct > 1.0 and ct < 86.0 : for p in range ( 2 ): x[t,p] = 0.0 for q in range ( 2 ): x[t,p] = x[t,p] + B[p,q] * x[t - 1 ,q] for p in range ( 2 ): x[t,p] = x[t,p] + AD[ 1 ,p] '''third condition''' elif ct > 86.0 and ct < 93.0 : for p in range ( 2 ): x[t,p] = 0.0 for q in range ( 2 ): x[t,p] = x[t,p] + C[p,q] * x[t - 1 ,q] for p in range ( 2 ): x[t,p] = x[t,p] + AD[ 2 ,p] '''fourth condition ''' elif ct > 93.0 and ct < 100.0 : for p in range ( 2 ): x[ 1 ,p] = 0.0 for q in range ( 2 ): x[t,p] = x[t,p] + D[p,q] * x[t - 1 ,q] for p in range ( 2 ): x[t,p] = x[t,p] + AD[ 3 ,p] X . append(x[t, 0 ]) Y . append(x[t, 1 ]) t = t + 1 To get the plot plt . figure(figsize = [ 5 , 8 ]) plt . scatter(X,Y,color = 'blue' ,marker = '.' ) plt . show()","title":"Method-2 : Manual Matrix Multiplication"},{"location":"Projects/Fern/fern/#method-3-numpy","text":"In this case we first define the matrices and implement numpy library to make products. To define Matrices '''Matrices''' A = np . array([[ 0.0 , 0.0 ],[ 0.0 , 0.16 ]]) B = np . array([[ 0.85 , 0.04 ],[ - 0.04 , 0.85 ]]) C = np . array([[ 0.20 , - 0.26 ],[ 0.23 , 0.22 ]]) D = np . array([[ - 0.15 , 0.28 ],[ 0.26 , 0.24 ]]) AD = np . array([[ 0.0 , 0.0 ], [ 0.0 , 1.6 ], [ 0.0 , 1.6 ], [ 0.0 , 0.44 ]]) To implement transformation u = np . array([ 0 , 0 ]) U = [u] n = 1 while n < 1000 : '''generate a random number''' r = random . uniform( 0 , 100 ) '''1rst condition''' if r < 1.0 : u = np . dot(A,u) U . append(u) '''second condition''' elif r > 1.0 and r < 86.0 : u = np . dot(B,u) + AD[ 1 ] U . append(u) '''third condition''' elif r > 86.0 and r < 93.0 : u = np . dot(C,u) + AD[ 2 ] U . append(u) '''fourth condition''' elif r > 93.0 and r < 100.0 : u = np . dot(D,u) + AD[ 3 ] U . append(u) '''update n''' n = n + 1 To get plot plt . figure(figsize = [ 5 , 8 ]) for item in U: plt . scatter(item[ 0 ],item[ 1 ],color = 'orange' ,marker = '.' ) plt . show()","title":"Method 3-Numpy"},{"location":"Projects/Ncharges/Ncharges/","text":"N-charge system The electric field for a single charge is given by: \\( E = q * \\frac{\\hat{r}}{r} \\) The electric Potential: \\( V = q * \\frac{1}{r} \\). In cartesian coordinate: \\( \\frac{1}{r} = \\frac{1}{\\sqrt{((x-x^{'})^{2} + (y - y^{'})^{2})}} \\). import numpy as np import matplotlib.pyplot as plt from matplotlib import cm import seaborn as sns sns . set() Class Charge Lets create a class Charge with function line to calculate the distance between source and field point and function V_point_charge to calculate the electric potential ata fileld point x,y due to source poin at pos . class Charge : '''Data incapsulation''' def __init__ ( self , q, pos): self . q = q self . pos = pos def line ( self , x,y): '''create a vector from charge to observation point''' self . vector = [x - self . pos[ 0 ],y - self . pos[ 1 ]] '''norm of the vector''' self . norm = np . sqrt(( self . vector[ 0 ]) ** 2 + ( self . vector[ 1 ]) ** 2 ) def V_point_charge ( self , x, y): '''recall length''' self . line(x,y) '''Make sure to exclude source itself''' if self . norm > 0 : self . V = self . q / self . norm '''if length is zero, set V equal to 0''' elif self . norm == 0 : self . V = 0 return self . V Example : Lets use charge q = 100 at posiotion x =1 and y =1 to find electric potential at different points in 2D C = Charge( 100 , [ 1 , 1 ]) for x in range ( 3 ): for y in range ( 3 ): print (x,y, \"|\" , C . V_point_charge(x, y)) 0 0 | 70.71067811865474 0 1 | 100.0 0 2 | 70.71067811865474 1 0 | 100.0 1 1 | 0 1 2 | 100.0 2 0 | 70.71067811865474 2 1 | 100.0 2 2 | 70.71067811865474 Total Electric potential Total electric potential at a point x,y is the sum of contribution of all charges defined in class Charge . def V_total (x, y, charges): V = 0 for C in charges: Vp = C . V_point_charge(x, y) V = V + Vp return V Example: Lets use collection of charges to find a electric potential at point x = 4, y =4 sample_charges = [Charge(q = 20 , pos = [ 23 , 34 ]), Charge(q = 25 , pos = [ 13 , 48 ]), Charge(q = 40 , pos = [ 3 , 14 ]), Charge(q = 80 , pos = [ 88 , 60 ])] V_total(x = 4 , y = 4 , charges = sample_charges) 5.892446541150622 Lattice of charges ( scatter ) Now, we are going to implement Charge class to define charge distribution and calculate electric potential at several places. To create a lattice of charges. '''first charge to be at x=1,y=1''' q = 100 '''Dictionary to collect charges, x and y xoordinates''' Qd = [] '''List to collect Charge objects''' charges = [] '''use for loops to construct collection of charges objects''' for i in range ( 5 ): for j in range ( 5 ): '''Collecting charges and their coordinates''' Qd . append({ \"q\" : q, \"x\" : i * 20 , \"y\" :j * 20 }) '''charge objects are being collected''' charges . append(Charge(q , [ 20 * i, 20 * j])) '''change the sign of charge alternatly''' q = - q To visualize lattice of charges '''Plot the lattice of charges''' plt . figure(figsize = [ 8 , 6 ]) for item in Qd: '''Sctaeer as red dot if charge is positive''' if item[ 'q' ] > 0 : plt . scatter(item[ 'x' ], item[ 'y' ], c = 'r' ,s = 100 ) '''Scatter as blue dot if charge is negative''' else : plt . scatter(item[ 'x' ], item[ 'y' ], c = 'b' ,s = 100 ) plt . xlabel( \"X-axis\" ) plt . ylabel( \"Y-asis\" ) plt . show() Electric Potential ( heatmap ) To find Electric Potential at several points due to lattice of charges '''Create X and Y coordinate''' X = np . arange( - 10 , 110 , 2 ) Y = np . arange( - 10 , 110 , 2 ) '''Initiate vacant V-list of list''' V = [[ 0.0 for i in range ( len (X))] for j in range ( len (Y))] '''Calculate Electric potential at each x,y coordinate''' for i,x in enumerate (X): for j,y in enumerate (Y): v = V_total(x, y, charges) V[i][j] = v VV = np . array(V) To plot Electric potential plt . figure(figsize = [ 12 , 10 ]) sns . heatmap(VV,annot = False ,cmap = 'YlGnBu' ) plt . xlabel( \"X-axis\" ) plt . ylabel( \"Y-axis\" ) plt . title( \"Electric field of lattice of charges\" ) plt . show() Electric Field ( meshgrid ) from matplotlib.patches import Circle To calculate Electric Field at at point x,y due to charge q at r0 def E (q, r0, x, y): \"\"\"Return the electric field vector E=(Ex,Ey) due to charge q at r0.\"\"\" den = np . hypot(x - r0[ 0 ], y - r0[ 1 ]) ** 3 return q * (x - r0[ 0 ]) / den, q * (y - r0[ 1 ]) / den To define the number charge in the system nq = 2 ** int ( 2 ) To create the meshgrid to make a plot # Grid of x, y points nx, ny = 16 , 16 x = np . linspace( - 2 , 2 , nx) y = np . linspace( - 2 , 2 , ny) X, Y = np . meshgrid(x, y) To define charge touples (q,x0,y0) charges = [] for i in range (nq): q = i % 2 * 2 - 1 charges . append((q, (np . cos( 2 * np . pi * i / nq), np . sin( 2 * np . pi * i / nq)))) To calculate Electric Field at point x,y due to predefined charge distribution # Electric field vector, E=(Ex, Ey), as separate components Ex, Ey = np . zeros((ny, nx)), np . zeros((ny, nx)) for charge in charges: ex, ey = E( * charge, x = X, y = Y) Ex += ex Ey += ey To plot Vector Field for Electric Field using streamplot . fig = plt . figure(figsize = [ 12 , 10 ]) ax = fig . add_subplot( 111 ) # Plot the streamlines with an appropriate colormap and arrow style color = 2 * np . log(np . hypot(Ex, Ey)) ax . streamplot(x, y, Ex, Ey, color = color, linewidth = 1 , cmap = plt . cm . inferno, density = 2 , arrowstyle = '->' , arrowsize = 1.5 ) # Add filled circles for the charges themselves charge_colors = { True : '#aa0000' , False : '#0000aa' } for q, pos in charges: ax . add_artist(Circle(pos, 0.05 , color = charge_colors[q > 0 ])) ax . set_xlabel( '$x-axis$' ) ax . set_ylabel( '$y-axis$' ) ax . set_xlim( - 2 , 2 ) ax . set_ylim( - 2 , 2 ) ax . set_aspect( 'equal' ) plt . show() Vector Field ( quiver ) To create a meshgrid for plot x,y = np . meshgrid(np . linspace( - 10 , 10 , 20 ),np . linspace( - 10 , 10 , 20 )) To set up parametric variables for vector field u = - y / np . sqrt(x ** 2 + y ** 2 ) v = x / np . sqrt(x ** 2 + y ** 2 ) To visualize vector field plt . figure(figsize = [ 12 , 10 ]) plt . quiver(x,y,u,v) plt . show() Vector Field ( quiver and quiverkey ) To set number of points and create space of x,y for vector field N = 25 x = np . arange( 0 , 2 * np . pi + 2 * np . pi / 20 , 2 * np . pi / N) y = np . arange( 0 , 2 * np . pi + 2 * np . pi / 20 , 2 * np . pi / N) To create meshgrid for plot X,Y = np . meshgrid(x,y) To create parametric variables for vector field U = np . sin(X) * np . cos(Y) V = - np . cos(X) * np . sin(Y) To create Plot fig3, ax3 = plt . subplots(figsize = [ 12 , 10 ]) ax3 . set_title( \"pivot='tip'; scales with x view\" ) M = np . hypot(U, V) Q = ax3 . quiver(X, Y, U, V, M,\\ units = 'x' ,\\ pivot = 'tip' , width = 0.022 , scale = 1 / 0.20 ) qk = ax3 . quiverkey(Q, 0.9 , 0.9 , 1 ,\\ r'$1 \\frac {m}{s} $' ,\\ labelpos = 'E' , coordinates = 'figure' ) ax3 . scatter(X, Y, color = '0.5' , s = 1 ) plt . show()","title":"Project N-charges"},{"location":"Projects/Ncharges/Ncharges/#n-charge-system","text":"The electric field for a single charge is given by: \\( E = q * \\frac{\\hat{r}}{r} \\) The electric Potential: \\( V = q * \\frac{1}{r} \\). In cartesian coordinate: \\( \\frac{1}{r} = \\frac{1}{\\sqrt{((x-x^{'})^{2} + (y - y^{'})^{2})}} \\). import numpy as np import matplotlib.pyplot as plt from matplotlib import cm import seaborn as sns sns . set()","title":"N-charge system"},{"location":"Projects/Ncharges/Ncharges/#class-charge","text":"Lets create a class Charge with function line to calculate the distance between source and field point and function V_point_charge to calculate the electric potential ata fileld point x,y due to source poin at pos . class Charge : '''Data incapsulation''' def __init__ ( self , q, pos): self . q = q self . pos = pos def line ( self , x,y): '''create a vector from charge to observation point''' self . vector = [x - self . pos[ 0 ],y - self . pos[ 1 ]] '''norm of the vector''' self . norm = np . sqrt(( self . vector[ 0 ]) ** 2 + ( self . vector[ 1 ]) ** 2 ) def V_point_charge ( self , x, y): '''recall length''' self . line(x,y) '''Make sure to exclude source itself''' if self . norm > 0 : self . V = self . q / self . norm '''if length is zero, set V equal to 0''' elif self . norm == 0 : self . V = 0 return self . V","title":"Class Charge"},{"location":"Projects/Ncharges/Ncharges/#example","text":"Lets use charge q = 100 at posiotion x =1 and y =1 to find electric potential at different points in 2D C = Charge( 100 , [ 1 , 1 ]) for x in range ( 3 ): for y in range ( 3 ): print (x,y, \"|\" , C . V_point_charge(x, y)) 0 0 | 70.71067811865474 0 1 | 100.0 0 2 | 70.71067811865474 1 0 | 100.0 1 1 | 0 1 2 | 100.0 2 0 | 70.71067811865474 2 1 | 100.0 2 2 | 70.71067811865474","title":"Example :"},{"location":"Projects/Ncharges/Ncharges/#total-electric-potential","text":"Total electric potential at a point x,y is the sum of contribution of all charges defined in class Charge . def V_total (x, y, charges): V = 0 for C in charges: Vp = C . V_point_charge(x, y) V = V + Vp return V Example: Lets use collection of charges to find a electric potential at point x = 4, y =4 sample_charges = [Charge(q = 20 , pos = [ 23 , 34 ]), Charge(q = 25 , pos = [ 13 , 48 ]), Charge(q = 40 , pos = [ 3 , 14 ]), Charge(q = 80 , pos = [ 88 , 60 ])] V_total(x = 4 , y = 4 , charges = sample_charges) 5.892446541150622","title":"Total Electric potential"},{"location":"Projects/Ncharges/Ncharges/#lattice-of-charges-scatter","text":"Now, we are going to implement Charge class to define charge distribution and calculate electric potential at several places. To create a lattice of charges. '''first charge to be at x=1,y=1''' q = 100 '''Dictionary to collect charges, x and y xoordinates''' Qd = [] '''List to collect Charge objects''' charges = [] '''use for loops to construct collection of charges objects''' for i in range ( 5 ): for j in range ( 5 ): '''Collecting charges and their coordinates''' Qd . append({ \"q\" : q, \"x\" : i * 20 , \"y\" :j * 20 }) '''charge objects are being collected''' charges . append(Charge(q , [ 20 * i, 20 * j])) '''change the sign of charge alternatly''' q = - q To visualize lattice of charges '''Plot the lattice of charges''' plt . figure(figsize = [ 8 , 6 ]) for item in Qd: '''Sctaeer as red dot if charge is positive''' if item[ 'q' ] > 0 : plt . scatter(item[ 'x' ], item[ 'y' ], c = 'r' ,s = 100 ) '''Scatter as blue dot if charge is negative''' else : plt . scatter(item[ 'x' ], item[ 'y' ], c = 'b' ,s = 100 ) plt . xlabel( \"X-axis\" ) plt . ylabel( \"Y-asis\" ) plt . show()","title":"Lattice of charges (scatter)"},{"location":"Projects/Ncharges/Ncharges/#electric-potential-heatmap","text":"To find Electric Potential at several points due to lattice of charges '''Create X and Y coordinate''' X = np . arange( - 10 , 110 , 2 ) Y = np . arange( - 10 , 110 , 2 ) '''Initiate vacant V-list of list''' V = [[ 0.0 for i in range ( len (X))] for j in range ( len (Y))] '''Calculate Electric potential at each x,y coordinate''' for i,x in enumerate (X): for j,y in enumerate (Y): v = V_total(x, y, charges) V[i][j] = v VV = np . array(V) To plot Electric potential plt . figure(figsize = [ 12 , 10 ]) sns . heatmap(VV,annot = False ,cmap = 'YlGnBu' ) plt . xlabel( \"X-axis\" ) plt . ylabel( \"Y-axis\" ) plt . title( \"Electric field of lattice of charges\" ) plt . show()","title":"Electric Potential (heatmap)"},{"location":"Projects/Ncharges/Ncharges/#electric-field-meshgrid","text":"from matplotlib.patches import Circle To calculate Electric Field at at point x,y due to charge q at r0 def E (q, r0, x, y): \"\"\"Return the electric field vector E=(Ex,Ey) due to charge q at r0.\"\"\" den = np . hypot(x - r0[ 0 ], y - r0[ 1 ]) ** 3 return q * (x - r0[ 0 ]) / den, q * (y - r0[ 1 ]) / den To define the number charge in the system nq = 2 ** int ( 2 ) To create the meshgrid to make a plot # Grid of x, y points nx, ny = 16 , 16 x = np . linspace( - 2 , 2 , nx) y = np . linspace( - 2 , 2 , ny) X, Y = np . meshgrid(x, y) To define charge touples (q,x0,y0) charges = [] for i in range (nq): q = i % 2 * 2 - 1 charges . append((q, (np . cos( 2 * np . pi * i / nq), np . sin( 2 * np . pi * i / nq)))) To calculate Electric Field at point x,y due to predefined charge distribution # Electric field vector, E=(Ex, Ey), as separate components Ex, Ey = np . zeros((ny, nx)), np . zeros((ny, nx)) for charge in charges: ex, ey = E( * charge, x = X, y = Y) Ex += ex Ey += ey To plot Vector Field for Electric Field using streamplot . fig = plt . figure(figsize = [ 12 , 10 ]) ax = fig . add_subplot( 111 ) # Plot the streamlines with an appropriate colormap and arrow style color = 2 * np . log(np . hypot(Ex, Ey)) ax . streamplot(x, y, Ex, Ey, color = color, linewidth = 1 , cmap = plt . cm . inferno, density = 2 , arrowstyle = '->' , arrowsize = 1.5 ) # Add filled circles for the charges themselves charge_colors = { True : '#aa0000' , False : '#0000aa' } for q, pos in charges: ax . add_artist(Circle(pos, 0.05 , color = charge_colors[q > 0 ])) ax . set_xlabel( '$x-axis$' ) ax . set_ylabel( '$y-axis$' ) ax . set_xlim( - 2 , 2 ) ax . set_ylim( - 2 , 2 ) ax . set_aspect( 'equal' ) plt . show()","title":"Electric Field (meshgrid)"},{"location":"Projects/Ncharges/Ncharges/#vector-field-quiver","text":"To create a meshgrid for plot x,y = np . meshgrid(np . linspace( - 10 , 10 , 20 ),np . linspace( - 10 , 10 , 20 )) To set up parametric variables for vector field u = - y / np . sqrt(x ** 2 + y ** 2 ) v = x / np . sqrt(x ** 2 + y ** 2 ) To visualize vector field plt . figure(figsize = [ 12 , 10 ]) plt . quiver(x,y,u,v) plt . show()","title":"Vector Field (quiver)"},{"location":"Projects/Ncharges/Ncharges/#vector-field-quiver-and-quiverkey","text":"To set number of points and create space of x,y for vector field N = 25 x = np . arange( 0 , 2 * np . pi + 2 * np . pi / 20 , 2 * np . pi / N) y = np . arange( 0 , 2 * np . pi + 2 * np . pi / 20 , 2 * np . pi / N) To create meshgrid for plot X,Y = np . meshgrid(x,y) To create parametric variables for vector field U = np . sin(X) * np . cos(Y) V = - np . cos(X) * np . sin(Y) To create Plot fig3, ax3 = plt . subplots(figsize = [ 12 , 10 ]) ax3 . set_title( \"pivot='tip'; scales with x view\" ) M = np . hypot(U, V) Q = ax3 . quiver(X, Y, U, V, M,\\ units = 'x' ,\\ pivot = 'tip' , width = 0.022 , scale = 1 / 0.20 ) qk = ax3 . quiverkey(Q, 0.9 , 0.9 , 1 ,\\ r'$1 \\frac {m}{s} $' ,\\ labelpos = 'E' , coordinates = 'figure' ) ax3 . scatter(X, Y, color = '0.5' , s = 1 ) plt . show()","title":"Vector Field (quiver and quiverkey)"},{"location":"Projects/Rwalk/Rwalk/","text":"Random Walk import numpy as np import random as random import matplotlib.pyplot as plt import seaborn as sns sns . set() Random walk in one dimension To create reandom walk in 1D, we generate random step 1, -1 and move in one direction. Since we are taking one direction and time to create a plot. It is displayed in plot below. Lets try to implement random walk with direct implementation with for loop and with function walk1D . Random Walk 1D (Direct) '''X stores 1-D coordinate''' X = [] '''T stores time coordinate''' T = [] '''starting point''' x = 0 '''length of each step''' d = 1 '''iteratefor N steps''' for t in range ( 100 ): '''Walk one step ahead''' x = x + d * random . choice([ - 1 , 1 ]) '''collect time''' T . append(t) '''collect position''' X . append(x) '''Make a plot''' plt . figure(figsize = [ 15 , 4 ]) plt . scatter(T,X,marker = '.' ) plt . plot(T,X) plt . xlabel( \"Time\" ) plt . ylabel( 'Displacement' ) plt . grid( True ) plt . show() Random Walk 1D (Function) def walk1D (x,N,d): '''This function returns the space 'X' and time 'T' for random walk in 1D x: initial position N: total number of steps d: step length''' '''X stores 1-D coordinate''' X = [] '''T stores time coordinate''' T = [] '''iteratefor N steps''' for t in range (N): '''Walk one step ahead''' x = x + d * random . choice([ - 1 , 1 ]) '''collect time''' T . append(t) '''collect position''' X . append(x) return X,T '''Implement function to get data''' X,T = walk1D(x = 0 ,N = 100 ,d = 1 ) '''Make a plot''' plt . figure(figsize = [ 15 , 4 ]) plt . scatter(T,X,marker = '.' ) plt . plot(T,X) plt . xlabel( \"Time\" ) plt . ylabel( 'Displacement' ) plt . grid( True ) plt . show() Random Walk 1D (Class) class Walker1D ( object ): ''' This is a class to create on dimentional walk: x0 : initial position d : step size N : number of steps in random walk ''' def __init__ ( self ,N,d,x0): self . N = N self . X = [] self . d = d self . x0 = x0 def walk1D ( self ): '''note initial position''' x = self . x0 k = 0 while k < self . N: '''Walk one step ahead''' x = x + self . d * random . choice([ - 1 , 1 ]) '''collect position''' self . X . append(x) k = k + 1 return self . X Let's generate 4 different random walks of step 1000 each X1 = Walker1D(N = 1000 ,d = 1 ,x0 = 0 ) . walk1D() X2 = Walker1D(N = 1000 ,d = 1 ,x0 = 0 ) . walk1D() X3 = Walker1D(N = 1000 ,d = 1 ,x0 = 0 ) . walk1D() X4 = Walker1D(N = 1000 ,d = 1 ,x0 = 0 ) . walk1D() T = [i for i in range ( len (X1))] import json with open ( 'data/rwalk4.json' , 'w' ) as f4: json . dump([X1,X2,X3,X4,T],f4) Let's visualize them plt . figure(figsize = [ 15 , 4 ]) plt . plot(T,X1) plt . plot(T,X2) plt . plot(T,X3) plt . plot(T,X4) plt . xlabel( \"Time\" ) plt . ylabel( 'Displacement' ) plt . grid( True ) plt . show() Random Walk in 2D Lets repeat the function implementation for 2D Random Walk. Random Walk 2D (Function) We will create two functions move2D to move one step and walk2D to walk multiple steps. def move2D (xi,yi): ''' This function choose a direction and walk one step in 2D ''' direction = random . choice([ 'x' , 'y' ]) if direction == 'x' : r = random . choice([ - 1 , 1 ]) if r == 1 :xf = xi + 1 else : xf = xi - 1 yf = yi if direction == 'y' : r = random . choice([ - 1 , 1 ]) if r == 1 :yf = yi + 1 else : yf = yi - 1 xf = xi return xf,yf def walk2D (N,pos): ''' This function walks N step in 2d implementing move2D ''' '''coordinate collectors''' X = [] ; Y = [] '''from where to start''' x0 = pos[ 0 ] ; y0 = pos[ 0 ] k = 0 while k < N: '''move a step''' x,y = move2D(x0,y0) '''collect X coordinate''' X . append(x) '''collect Y coordinate''' Y . append(y) '''set previous position for next step''' x0 = x y0 = y k = k + 1 return X,Y Lets create a 3 different Random walk in 2D N = 10000 U = walk2D(N,[ 0 , 0 ]) V = walk2D(N,[ 0 , 0 ]) W = walk2D(N,[ 0 , 0 ]) plt . figure(figsize = [ 8 , 8 ]) plt . plot(U[ 0 ],U[ 1 ], \"-\" ) plt . plot(V[ 0 ],V[ 1 ], \"-\" ) plt . plot(W[ 0 ],W[ 1 ], \"-\" ) #plt.axis([-100, 100, -100, 100]) plt . xlabel( \"x-axis\" ) plt . ylabel( \"y-axis\" ) plt . grid( True ) plt . title( \"Brownian motion in 2D\" ) plt . show() Random Walk in 3D Similarly Random Walk in 3D can be created and visualized with .gif file as shown below","title":"Project Random Walk"},{"location":"Projects/Rwalk/Rwalk/#random-walk","text":"import numpy as np import random as random import matplotlib.pyplot as plt import seaborn as sns sns . set()","title":"Random Walk"},{"location":"Projects/Rwalk/Rwalk/#random-walk-in-one-dimension","text":"To create reandom walk in 1D, we generate random step 1, -1 and move in one direction. Since we are taking one direction and time to create a plot. It is displayed in plot below. Lets try to implement random walk with direct implementation with for loop and with function walk1D .","title":"Random walk in one dimension"},{"location":"Projects/Rwalk/Rwalk/#random-walk-1d-direct","text":"'''X stores 1-D coordinate''' X = [] '''T stores time coordinate''' T = [] '''starting point''' x = 0 '''length of each step''' d = 1 '''iteratefor N steps''' for t in range ( 100 ): '''Walk one step ahead''' x = x + d * random . choice([ - 1 , 1 ]) '''collect time''' T . append(t) '''collect position''' X . append(x) '''Make a plot''' plt . figure(figsize = [ 15 , 4 ]) plt . scatter(T,X,marker = '.' ) plt . plot(T,X) plt . xlabel( \"Time\" ) plt . ylabel( 'Displacement' ) plt . grid( True ) plt . show()","title":"Random Walk 1D (Direct)"},{"location":"Projects/Rwalk/Rwalk/#random-walk-1d-function","text":"def walk1D (x,N,d): '''This function returns the space 'X' and time 'T' for random walk in 1D x: initial position N: total number of steps d: step length''' '''X stores 1-D coordinate''' X = [] '''T stores time coordinate''' T = [] '''iteratefor N steps''' for t in range (N): '''Walk one step ahead''' x = x + d * random . choice([ - 1 , 1 ]) '''collect time''' T . append(t) '''collect position''' X . append(x) return X,T '''Implement function to get data''' X,T = walk1D(x = 0 ,N = 100 ,d = 1 ) '''Make a plot''' plt . figure(figsize = [ 15 , 4 ]) plt . scatter(T,X,marker = '.' ) plt . plot(T,X) plt . xlabel( \"Time\" ) plt . ylabel( 'Displacement' ) plt . grid( True ) plt . show()","title":"Random Walk 1D (Function)"},{"location":"Projects/Rwalk/Rwalk/#random-walk-1d-class","text":"class Walker1D ( object ): ''' This is a class to create on dimentional walk: x0 : initial position d : step size N : number of steps in random walk ''' def __init__ ( self ,N,d,x0): self . N = N self . X = [] self . d = d self . x0 = x0 def walk1D ( self ): '''note initial position''' x = self . x0 k = 0 while k < self . N: '''Walk one step ahead''' x = x + self . d * random . choice([ - 1 , 1 ]) '''collect position''' self . X . append(x) k = k + 1 return self . X Let's generate 4 different random walks of step 1000 each X1 = Walker1D(N = 1000 ,d = 1 ,x0 = 0 ) . walk1D() X2 = Walker1D(N = 1000 ,d = 1 ,x0 = 0 ) . walk1D() X3 = Walker1D(N = 1000 ,d = 1 ,x0 = 0 ) . walk1D() X4 = Walker1D(N = 1000 ,d = 1 ,x0 = 0 ) . walk1D() T = [i for i in range ( len (X1))] import json with open ( 'data/rwalk4.json' , 'w' ) as f4: json . dump([X1,X2,X3,X4,T],f4) Let's visualize them plt . figure(figsize = [ 15 , 4 ]) plt . plot(T,X1) plt . plot(T,X2) plt . plot(T,X3) plt . plot(T,X4) plt . xlabel( \"Time\" ) plt . ylabel( 'Displacement' ) plt . grid( True ) plt . show()","title":"Random Walk 1D (Class)"},{"location":"Projects/Rwalk/Rwalk/#random-walk-in-2d","text":"Lets repeat the function implementation for 2D Random Walk.","title":"Random Walk in 2D"},{"location":"Projects/Rwalk/Rwalk/#random-walk-2d-function","text":"We will create two functions move2D to move one step and walk2D to walk multiple steps. def move2D (xi,yi): ''' This function choose a direction and walk one step in 2D ''' direction = random . choice([ 'x' , 'y' ]) if direction == 'x' : r = random . choice([ - 1 , 1 ]) if r == 1 :xf = xi + 1 else : xf = xi - 1 yf = yi if direction == 'y' : r = random . choice([ - 1 , 1 ]) if r == 1 :yf = yi + 1 else : yf = yi - 1 xf = xi return xf,yf def walk2D (N,pos): ''' This function walks N step in 2d implementing move2D ''' '''coordinate collectors''' X = [] ; Y = [] '''from where to start''' x0 = pos[ 0 ] ; y0 = pos[ 0 ] k = 0 while k < N: '''move a step''' x,y = move2D(x0,y0) '''collect X coordinate''' X . append(x) '''collect Y coordinate''' Y . append(y) '''set previous position for next step''' x0 = x y0 = y k = k + 1 return X,Y Lets create a 3 different Random walk in 2D N = 10000 U = walk2D(N,[ 0 , 0 ]) V = walk2D(N,[ 0 , 0 ]) W = walk2D(N,[ 0 , 0 ]) plt . figure(figsize = [ 8 , 8 ]) plt . plot(U[ 0 ],U[ 1 ], \"-\" ) plt . plot(V[ 0 ],V[ 1 ], \"-\" ) plt . plot(W[ 0 ],W[ 1 ], \"-\" ) #plt.axis([-100, 100, -100, 100]) plt . xlabel( \"x-axis\" ) plt . ylabel( \"y-axis\" ) plt . grid( True ) plt . title( \"Brownian motion in 2D\" ) plt . show()","title":"Random Walk 2D (Function)"},{"location":"Projects/Rwalk/Rwalk/#random-walk-in-3d","text":"Similarly Random Walk in 3D can be created and visualized with .gif file as shown below","title":"Random Walk in 3D"},{"location":"References/ref/","text":"References Mkdocs Deploy MkDocs MkDoc Black and Blue Codehilit Syntax highlight all Syntax highlight code","title":"Reference"},{"location":"References/ref/#references","text":"","title":"References"},{"location":"References/ref/#mkdocs","text":"Deploy MkDocs MkDoc Black and Blue Codehilit Syntax highlight all Syntax highlight code","title":"Mkdocs"},{"location":"StandardLibrary/psl/","text":"The Python Standard Library Python\u2019s standard library is very extensive, offering a wide range of facilities as indicated by the long table of contents listed below. The library contains built-in modules (written in C) that provide access to system functionality such as file I/O that would otherwise be inaccessible to Python programmers, as well as modules written in Python that provide standardized solutions for many problems that occur in everyday programming. Some of these modules are explicitly designed to encourage and enhance the portability of Python programs by abstracting away platform-specifics into platform-neutral APIs. string for i in range ( 5 ): for j in range ( 2 ): print ( \"this is ( {} , {} ) integer\" . format(i,j)) this is (0,0) integer this is (0,1) integer this is (1,0) integer this is (1,1) integer this is (2,0) integer this is (2,1) integer this is (3,0) integer this is (3,1) integer this is (4,0) integer this is (4,1) integer import re s = 'Hello from shubhamg199630@gmail.com to priya@yahoo.com about \\ the meeting @2PM. Can we meet today for an important decision? \\ Based on previous meeting minute we had decided to write an emailto \\ abc@example.com. In case we do not get reply. \\ Hello from shubhamg@gmail.com to priya2@yahoo.com about \\ the meeting @2PM. Can we meet today for an important decision? \\ Based on previous meeting minute we had decided to write an emailto \\ abcd@example.com. In case we do not get reply \\ Hello from shubhamg19@gmail.com to priya5@yahoo.com about \\ the meeting @2PM. Can we meet today for an important decision? \\ Based on previous meeting minute we had decided to write an emailto \\ abct@example.com. In case we do not get reply' lst = re . findall( '\\S+@\\S+' , s) print (lst) ['shubhamg199630@gmail.com', 'priya@yahoo.com', 'abc@example.com.', 'shubhamg@gmail.com', 'priya2@yahoo.com', 'abcd@example.com.', 'shubhamg19@gmail.com', 'priya5@yahoo.com', 'abct@example.com.'] collections from collections import namedtuple point = namedtuple( 'Point' , [ 'x' , 'y' ]) point( 11 , 12 ) Point(x=11, y=12) point( 2 , 3 ) Point(x=2, y=3) from collections import Counter A = [ 1 , 3 , 5 , 6 , 8 , 6 , 5 , 4 , 5 , 6 , 5 , 4 , 3 , 2 ] Counter(A) Counter({1: 1, 3: 2, 5: 4, 6: 3, 8: 1, 4: 2, 2: 1}) itertools from itertools import permutations L = [ \"a\" , \"b\" , \"c\" , \"d\" , \"e\" ] for item in permutations(L, 2 ): print (item) ('a', 'b') ('a', 'c') ('a', 'd') ('b', 'a') ('b', 'c') ('b', 'd') ('c', 'a') ('c', 'b') ('c', 'd') ('d', 'a') ('d', 'b') ('d', 'c') for item in permutations(L, 3 ): print (item) ('a', 'b', 'c') ('a', 'b', 'd') ('a', 'c', 'b') ('a', 'c', 'd') ('a', 'd', 'b') ('a', 'd', 'c') ('b', 'a', 'c') ('b', 'a', 'd') ('b', 'c', 'a') ('b', 'c', 'd') ('b', 'd', 'a') ('b', 'd', 'c') ('c', 'a', 'b') ('c', 'a', 'd') ('c', 'b', 'a') ('c', 'b', 'd') ('c', 'd', 'a') ('c', 'd', 'b') ('d', 'a', 'b') ('d', 'a', 'c') ('d', 'b', 'a') ('d', 'b', 'c') ('d', 'c', 'a') ('d', 'c', 'b') os import os path = \"plot\" os . path . isdir(path) True path = \"1. DataStructure.ipynb\" os . path . isfile(path) True os . listdir() ['.git', '.gitignore', '.ipynb_checkpoints', '1. DataStructure.ipynb', '1.1-MiniAssignment-DNAcount.ipynb', '2. LoopAndCondition.ipynb', '3. Input and Output.ipynb', '4. FunctionAndClass.ipynb', '5. Learning from Errors.ipynb', '6. The Python Standard Library.ipynb', 'data', 'Learning to read error.ipynb', 'plot', 'Project1-Fern-I.ipynb', 'Project2-Rwalk.ipynb', 'Project3-Ncharges.ipynb', 'Project4-Diffusion.ipynb', 'Project5-Fern-II.ipynb', 'README.md'] import os # Running the aforementioned command and saving its output output = os . popen( 'wmic process get description, processid' ) . read() # Displaying the output print (output[ 0 : 1000 ]) Description ProcessId System Idle Process 0 System 4 Registry 96 smss.exe 416 csrss.exe 640 csrss.exe 744 wininit.exe 772 services.exe 820 lsass.exe 868 winlogon.exe 940 svchost.exe 392 svchost.exe 576 fontdrvhost.exe 592 fontdrvhost.exe 588 WUDFHost.exe 564 svchost.exe 1068 svchost.exe 1120 dwm.exe 1208 svchost.exe 1344 svchost.exe 1352 svchost.exe glob import glob glob . glob( '*.ipynb' ) ['1. DataStructure.ipynb', '1.1-MiniAssignment-DNAcount.ipynb', '2. LoopAndCondition.ipynb', '3. Input and Output.ipynb', '4. FunctionAndClass.ipynb', '5. Learning from Errors.ipynb', '6. The Python Standard Library.ipynb', 'Learning to read error.ipynb', 'Project1-Fern-I.ipynb', 'Project2-Rwalk.ipynb', 'Project3-Ncharges.ipynb', 'Project4-Diffusion.ipynb', 'Project5-Fern-II.ipynb'] time import time t1 = time . time() for i in range ( 1000001 ): if i == 1000000 : print ( \"done!\" ) t2 = time . time() t2 - t1 done! 0.09277701377868652 urllib ff = open ( 'data/web.txt' , 'w' ) import urllib.request import urllib.parse params = urllib . parse . urlencode({ 'spam' : 1 , 'eggs' : 2 , 'bacon' : 0 }) url = \"http://www.python.org\" with urllib . request . urlopen(url) as f: ff . write(f . read() . decode( 'utf-8' )) ff . close() tqdm import time from tqdm import tqdm mylist = [i for i in range ( 100 )] for i in tqdm(mylist): time . sleep( 0.5 ) 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100/100 [00:50<00:00, 1.99it/s]","title":"Python Standard Library"},{"location":"StandardLibrary/psl/#the-python-standard-library","text":"Python\u2019s standard library is very extensive, offering a wide range of facilities as indicated by the long table of contents listed below. The library contains built-in modules (written in C) that provide access to system functionality such as file I/O that would otherwise be inaccessible to Python programmers, as well as modules written in Python that provide standardized solutions for many problems that occur in everyday programming. Some of these modules are explicitly designed to encourage and enhance the portability of Python programs by abstracting away platform-specifics into platform-neutral APIs.","title":"The Python Standard Library"},{"location":"StandardLibrary/psl/#string","text":"for i in range ( 5 ): for j in range ( 2 ): print ( \"this is ( {} , {} ) integer\" . format(i,j)) this is (0,0) integer this is (0,1) integer this is (1,0) integer this is (1,1) integer this is (2,0) integer this is (2,1) integer this is (3,0) integer this is (3,1) integer this is (4,0) integer this is (4,1) integer import re s = 'Hello from shubhamg199630@gmail.com to priya@yahoo.com about \\ the meeting @2PM. Can we meet today for an important decision? \\ Based on previous meeting minute we had decided to write an emailto \\ abc@example.com. In case we do not get reply. \\ Hello from shubhamg@gmail.com to priya2@yahoo.com about \\ the meeting @2PM. Can we meet today for an important decision? \\ Based on previous meeting minute we had decided to write an emailto \\ abcd@example.com. In case we do not get reply \\ Hello from shubhamg19@gmail.com to priya5@yahoo.com about \\ the meeting @2PM. Can we meet today for an important decision? \\ Based on previous meeting minute we had decided to write an emailto \\ abct@example.com. In case we do not get reply' lst = re . findall( '\\S+@\\S+' , s) print (lst) ['shubhamg199630@gmail.com', 'priya@yahoo.com', 'abc@example.com.', 'shubhamg@gmail.com', 'priya2@yahoo.com', 'abcd@example.com.', 'shubhamg19@gmail.com', 'priya5@yahoo.com', 'abct@example.com.']","title":"string"},{"location":"StandardLibrary/psl/#collections","text":"from collections import namedtuple point = namedtuple( 'Point' , [ 'x' , 'y' ]) point( 11 , 12 ) Point(x=11, y=12) point( 2 , 3 ) Point(x=2, y=3) from collections import Counter A = [ 1 , 3 , 5 , 6 , 8 , 6 , 5 , 4 , 5 , 6 , 5 , 4 , 3 , 2 ] Counter(A) Counter({1: 1, 3: 2, 5: 4, 6: 3, 8: 1, 4: 2, 2: 1})","title":"collections"},{"location":"StandardLibrary/psl/#itertools","text":"from itertools import permutations L = [ \"a\" , \"b\" , \"c\" , \"d\" , \"e\" ] for item in permutations(L, 2 ): print (item) ('a', 'b') ('a', 'c') ('a', 'd') ('b', 'a') ('b', 'c') ('b', 'd') ('c', 'a') ('c', 'b') ('c', 'd') ('d', 'a') ('d', 'b') ('d', 'c') for item in permutations(L, 3 ): print (item) ('a', 'b', 'c') ('a', 'b', 'd') ('a', 'c', 'b') ('a', 'c', 'd') ('a', 'd', 'b') ('a', 'd', 'c') ('b', 'a', 'c') ('b', 'a', 'd') ('b', 'c', 'a') ('b', 'c', 'd') ('b', 'd', 'a') ('b', 'd', 'c') ('c', 'a', 'b') ('c', 'a', 'd') ('c', 'b', 'a') ('c', 'b', 'd') ('c', 'd', 'a') ('c', 'd', 'b') ('d', 'a', 'b') ('d', 'a', 'c') ('d', 'b', 'a') ('d', 'b', 'c') ('d', 'c', 'a') ('d', 'c', 'b')","title":"itertools"},{"location":"StandardLibrary/psl/#os","text":"import os path = \"plot\" os . path . isdir(path) True path = \"1. DataStructure.ipynb\" os . path . isfile(path) True os . listdir() ['.git', '.gitignore', '.ipynb_checkpoints', '1. DataStructure.ipynb', '1.1-MiniAssignment-DNAcount.ipynb', '2. LoopAndCondition.ipynb', '3. Input and Output.ipynb', '4. FunctionAndClass.ipynb', '5. Learning from Errors.ipynb', '6. The Python Standard Library.ipynb', 'data', 'Learning to read error.ipynb', 'plot', 'Project1-Fern-I.ipynb', 'Project2-Rwalk.ipynb', 'Project3-Ncharges.ipynb', 'Project4-Diffusion.ipynb', 'Project5-Fern-II.ipynb', 'README.md'] import os # Running the aforementioned command and saving its output output = os . popen( 'wmic process get description, processid' ) . read() # Displaying the output print (output[ 0 : 1000 ]) Description ProcessId System Idle Process 0 System 4 Registry 96 smss.exe 416 csrss.exe 640 csrss.exe 744 wininit.exe 772 services.exe 820 lsass.exe 868 winlogon.exe 940 svchost.exe 392 svchost.exe 576 fontdrvhost.exe 592 fontdrvhost.exe 588 WUDFHost.exe 564 svchost.exe 1068 svchost.exe 1120 dwm.exe 1208 svchost.exe 1344 svchost.exe 1352 svchost.exe","title":"os"},{"location":"StandardLibrary/psl/#glob","text":"import glob glob . glob( '*.ipynb' ) ['1. DataStructure.ipynb', '1.1-MiniAssignment-DNAcount.ipynb', '2. LoopAndCondition.ipynb', '3. Input and Output.ipynb', '4. FunctionAndClass.ipynb', '5. Learning from Errors.ipynb', '6. The Python Standard Library.ipynb', 'Learning to read error.ipynb', 'Project1-Fern-I.ipynb', 'Project2-Rwalk.ipynb', 'Project3-Ncharges.ipynb', 'Project4-Diffusion.ipynb', 'Project5-Fern-II.ipynb']","title":"glob"},{"location":"StandardLibrary/psl/#time","text":"import time t1 = time . time() for i in range ( 1000001 ): if i == 1000000 : print ( \"done!\" ) t2 = time . time() t2 - t1 done! 0.09277701377868652","title":"time"},{"location":"StandardLibrary/psl/#urllib","text":"ff = open ( 'data/web.txt' , 'w' ) import urllib.request import urllib.parse params = urllib . parse . urlencode({ 'spam' : 1 , 'eggs' : 2 , 'bacon' : 0 }) url = \"http://www.python.org\" with urllib . request . urlopen(url) as f: ff . write(f . read() . decode( 'utf-8' )) ff . close()","title":"urllib"},{"location":"StandardLibrary/psl/#tqdm","text":"import time from tqdm import tqdm mylist = [i for i in range ( 100 )] for i in tqdm(mylist): time . sleep( 0.5 ) 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100/100 [00:50<00:00, 1.99it/s]","title":"tqdm"}]}